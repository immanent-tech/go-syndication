// Package jsonfeed provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package jsonfeed

import (
	"encoding/json"
	"fmt"

	"github.com/joshuar/go-syndication/types"
)

// Attachment is a related resource.
type Attachment struct {
	// DurationInSeconds specifies how long it takes to listen to or watch, when played at normal speed.
	DurationInSeconds *int `json:"duration_in_seconds,omitempty"`

	// MimeType specifies the type of the attachment.
	MimeType *string `json:"mime_type,omitempty"`

	// SizeInBytes specifies how large the file is.
	SizeInBytes *int `json:"size_in_bytes,omitempty"`

	// Title is a name for the attachment.
	Title *string `json:"title,omitempty"`

	// URL specifies the location of the attachment.
	URL                  string                 `json:"url" validate:"required,url"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Author specifies one or more object authors.
type Author struct {
	// Avatar is the URL for an image for the author.
	Avatar *string `json:"avatar,omitempty" validate:"omitempty,url"`

	// Name is the author’s name.
	Name *string `json:"name,omitempty"`

	// URL is the URL of a site owned by the author.
	URL                  *string                `json:"url,omitempty" validate:"omitempty,url"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Feed contains the metadata and objects for a JSONFeed.
type Feed struct {
	// Author specifies one or more object authors.
	Author *Author `json:"author,omitempty"`

	// Authors specifies one or more feed authors.
	Authors []Author `json:"authors,omitempty"`

	// Description provides more detail, beyond the title, on what the feed is about.
	Description *string `json:"description,omitempty"`

	// Expired says whether or not the feed is finished — that is, whether or not it will ever update again.
	Expired *bool `json:"expired,omitempty"`

	// Favicon is the URL of an image for the feed suitable to be used in a source list.
	Favicon *string `json:"favicon,omitempty" validate:"omitempty,url"`

	// FeedURL is the URL of the feed, and serves as the unique identifier for the feed.
	FeedURL *string `json:"feed_url,omitempty" validate:"omitempty,url"`

	// HomePageURL is the URL of the resource that the feed describes. This resource may or may not actually be a “home” page, but it should be an HTML page.
	HomePageURL *string `json:"home_page_url,omitempty" validate:"omitempty,url"`

	// Hubs describes endpoints that can be used to subscribe to real-time notifications from the publisher of this feed.
	Hubs []Hub `json:"hubs,omitempty"`

	// Icon is the URL of an image for the feed suitable to be used in a timeline, much the way an avatar might be used.
	Icon *string `json:"icon,omitempty" validate:"omitempty,url"`

	// Items the individual entries in the feed.
	Items []Item `json:"items"`

	// Language is the primary language for the feed.
	Language *string `json:"language,omitempty" validate:"omitempty,bcp47_language_tag"`

	// NextURL is the URL of a feed that provides the next n items, where n is determined by the publisher. This allows for pagination, but with the expectation that reader software is not required to use it and probably won’t use it very often.
	NextURL *string `json:"next_url,omitempty" validate:"omitempty,url"`

	// Title is the name of the feed, which will often correspond to the name of the website (blog, for instance), though not necessarily.
	Title string `json:"title" validate:"required"`

	// UserComment is a description of the purpose of the feed.
	UserComment *string `json:"user_comment,omitempty"`

	// Version is the URL of the version of the format the feed uses.
	Version              string                 `json:"version" validate:"required,url"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Hub describes an endpoint that can be used to subscribe to real-time notifications.
type Hub struct {
	// Title describes the protocol used to talk with the hub, such as “rssCloud” or “WebSub.”
	Title string `json:"title"`

	// URL is the endpoint location.
	URL string `json:"url" validate:"required,url"`
}

// Item is an individual entry or record in the feed.
type Item struct {
	// Attachments lists related resources.
	Attachments []Attachment `json:"attachments,omitempty"`

	// Author specifies one or more object authors.
	Author *Author `json:"author,omitempty"`

	// Authors specifies one or more item authors.
	Authors []Author `json:"authors,omitempty"`

	// BannerImage is the URL of an image to use as a banner.
	BannerImage *string `json:"banner_image,omitempty" validate:"omitempty,url"`

	// ContentHTML is the HTML of the item.
	ContentHTML *string `json:"content_html,omitempty"`

	// ContentText is the plain text of the item.
	ContentText *string `json:"content_text,omitempty"`

	// DateModified is the datetime when the item was modified.
	DateModified *types.DateTime `json:"date_modified,omitempty"`

	// DatePublished is the datetime when the item was published.
	DatePublished *types.DateTime `json:"date_published,omitempty"`

	// ExternalURL is the URL of a page elsewhere. This is especially useful for linkblogs. If url links to where you’re talking about a thing, then external_url links to the thing you’re talking about.
	ExternalURL *string `json:"external_url,omitempty" validate:"omitempty,url"`

	// ID is unique for that item for that feed over time.
	ID string `json:"id"`

	// Image is the URL of the main image for the item.
	Image *string `json:"image,omitempty" validate:"omitempty,url"`

	// Language is the primary language for the feed.
	Language *string `json:"language,omitempty" validate:"omitempty,bcp47_language_tag"`

	// Summary is a plain text sentence or two describing the item.
	Summary *string `json:"summary,omitempty"`

	// Tags defines taxonomy for an item.
	Tags []string `json:"tags,omitempty"`

	// Title is the title of the item.
	Title *string `json:"title,omitempty"`

	// URL is the URL of the resource described by the item. It’s the permalink.
	URL                  *string                `json:"url,omitempty" validate:"omitempty,url"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Getter for additional properties for Attachment. Returns the specified
// element and whether it was found
func (a Attachment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Attachment
func (a *Attachment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Attachment to handle AdditionalProperties
func (a *Attachment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["duration_in_seconds"]; found {
		err = json.Unmarshal(raw, &a.DurationInSeconds)
		if err != nil {
			return fmt.Errorf("error reading 'duration_in_seconds': %w", err)
		}
		delete(object, "duration_in_seconds")
	}

	if raw, found := object["mime_type"]; found {
		err = json.Unmarshal(raw, &a.MimeType)
		if err != nil {
			return fmt.Errorf("error reading 'mime_type': %w", err)
		}
		delete(object, "mime_type")
	}

	if raw, found := object["size_in_bytes"]; found {
		err = json.Unmarshal(raw, &a.SizeInBytes)
		if err != nil {
			return fmt.Errorf("error reading 'size_in_bytes': %w", err)
		}
		delete(object, "size_in_bytes")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.URL)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Attachment to handle AdditionalProperties
func (a Attachment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DurationInSeconds != nil {
		object["duration_in_seconds"], err = json.Marshal(a.DurationInSeconds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'duration_in_seconds': %w", err)
		}
	}

	if a.MimeType != nil {
		object["mime_type"], err = json.Marshal(a.MimeType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mime_type': %w", err)
		}
	}

	if a.SizeInBytes != nil {
		object["size_in_bytes"], err = json.Marshal(a.SizeInBytes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size_in_bytes': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	object["url"], err = json.Marshal(a.URL)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'url': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Author. Returns the specified
// element and whether it was found
func (a Author) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Author
func (a *Author) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Author to handle AdditionalProperties
func (a *Author) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["avatar"]; found {
		err = json.Unmarshal(raw, &a.Avatar)
		if err != nil {
			return fmt.Errorf("error reading 'avatar': %w", err)
		}
		delete(object, "avatar")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.URL)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Author to handle AdditionalProperties
func (a Author) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Avatar != nil {
		object["avatar"], err = json.Marshal(a.Avatar)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'avatar': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.URL != nil {
		object["url"], err = json.Marshal(a.URL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Feed. Returns the specified
// element and whether it was found
func (a Feed) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Feed
func (a *Feed) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Feed to handle AdditionalProperties
func (a *Feed) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["author"]; found {
		err = json.Unmarshal(raw, &a.Author)
		if err != nil {
			return fmt.Errorf("error reading 'author': %w", err)
		}
		delete(object, "author")
	}

	if raw, found := object["authors"]; found {
		err = json.Unmarshal(raw, &a.Authors)
		if err != nil {
			return fmt.Errorf("error reading 'authors': %w", err)
		}
		delete(object, "authors")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["expired"]; found {
		err = json.Unmarshal(raw, &a.Expired)
		if err != nil {
			return fmt.Errorf("error reading 'expired': %w", err)
		}
		delete(object, "expired")
	}

	if raw, found := object["favicon"]; found {
		err = json.Unmarshal(raw, &a.Favicon)
		if err != nil {
			return fmt.Errorf("error reading 'favicon': %w", err)
		}
		delete(object, "favicon")
	}

	if raw, found := object["feed_url"]; found {
		err = json.Unmarshal(raw, &a.FeedURL)
		if err != nil {
			return fmt.Errorf("error reading 'feed_url': %w", err)
		}
		delete(object, "feed_url")
	}

	if raw, found := object["home_page_url"]; found {
		err = json.Unmarshal(raw, &a.HomePageURL)
		if err != nil {
			return fmt.Errorf("error reading 'home_page_url': %w", err)
		}
		delete(object, "home_page_url")
	}

	if raw, found := object["hubs"]; found {
		err = json.Unmarshal(raw, &a.Hubs)
		if err != nil {
			return fmt.Errorf("error reading 'hubs': %w", err)
		}
		delete(object, "hubs")
	}

	if raw, found := object["icon"]; found {
		err = json.Unmarshal(raw, &a.Icon)
		if err != nil {
			return fmt.Errorf("error reading 'icon': %w", err)
		}
		delete(object, "icon")
	}

	if raw, found := object["items"]; found {
		err = json.Unmarshal(raw, &a.Items)
		if err != nil {
			return fmt.Errorf("error reading 'items': %w", err)
		}
		delete(object, "items")
	}

	if raw, found := object["language"]; found {
		err = json.Unmarshal(raw, &a.Language)
		if err != nil {
			return fmt.Errorf("error reading 'language': %w", err)
		}
		delete(object, "language")
	}

	if raw, found := object["next_url"]; found {
		err = json.Unmarshal(raw, &a.NextURL)
		if err != nil {
			return fmt.Errorf("error reading 'next_url': %w", err)
		}
		delete(object, "next_url")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["user_comment"]; found {
		err = json.Unmarshal(raw, &a.UserComment)
		if err != nil {
			return fmt.Errorf("error reading 'user_comment': %w", err)
		}
		delete(object, "user_comment")
	}

	if raw, found := object["version"]; found {
		err = json.Unmarshal(raw, &a.Version)
		if err != nil {
			return fmt.Errorf("error reading 'version': %w", err)
		}
		delete(object, "version")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Feed to handle AdditionalProperties
func (a Feed) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Author != nil {
		object["author"], err = json.Marshal(a.Author)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'author': %w", err)
		}
	}

	if a.Authors != nil {
		object["authors"], err = json.Marshal(a.Authors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authors': %w", err)
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if a.Expired != nil {
		object["expired"], err = json.Marshal(a.Expired)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expired': %w", err)
		}
	}

	if a.Favicon != nil {
		object["favicon"], err = json.Marshal(a.Favicon)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'favicon': %w", err)
		}
	}

	if a.FeedURL != nil {
		object["feed_url"], err = json.Marshal(a.FeedURL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'feed_url': %w", err)
		}
	}

	if a.HomePageURL != nil {
		object["home_page_url"], err = json.Marshal(a.HomePageURL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'home_page_url': %w", err)
		}
	}

	if a.Hubs != nil {
		object["hubs"], err = json.Marshal(a.Hubs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hubs': %w", err)
		}
	}

	if a.Icon != nil {
		object["icon"], err = json.Marshal(a.Icon)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'icon': %w", err)
		}
	}

	object["items"], err = json.Marshal(a.Items)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'items': %w", err)
	}

	if a.Language != nil {
		object["language"], err = json.Marshal(a.Language)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'language': %w", err)
		}
	}

	if a.NextURL != nil {
		object["next_url"], err = json.Marshal(a.NextURL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'next_url': %w", err)
		}
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	if a.UserComment != nil {
		object["user_comment"], err = json.Marshal(a.UserComment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user_comment': %w", err)
		}
	}

	object["version"], err = json.Marshal(a.Version)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'version': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Item. Returns the specified
// element and whether it was found
func (a Item) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Item
func (a *Item) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Item to handle AdditionalProperties
func (a *Item) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attachments"]; found {
		err = json.Unmarshal(raw, &a.Attachments)
		if err != nil {
			return fmt.Errorf("error reading 'attachments': %w", err)
		}
		delete(object, "attachments")
	}

	if raw, found := object["author"]; found {
		err = json.Unmarshal(raw, &a.Author)
		if err != nil {
			return fmt.Errorf("error reading 'author': %w", err)
		}
		delete(object, "author")
	}

	if raw, found := object["authors"]; found {
		err = json.Unmarshal(raw, &a.Authors)
		if err != nil {
			return fmt.Errorf("error reading 'authors': %w", err)
		}
		delete(object, "authors")
	}

	if raw, found := object["banner_image"]; found {
		err = json.Unmarshal(raw, &a.BannerImage)
		if err != nil {
			return fmt.Errorf("error reading 'banner_image': %w", err)
		}
		delete(object, "banner_image")
	}

	if raw, found := object["content_html"]; found {
		err = json.Unmarshal(raw, &a.ContentHTML)
		if err != nil {
			return fmt.Errorf("error reading 'content_html': %w", err)
		}
		delete(object, "content_html")
	}

	if raw, found := object["content_text"]; found {
		err = json.Unmarshal(raw, &a.ContentText)
		if err != nil {
			return fmt.Errorf("error reading 'content_text': %w", err)
		}
		delete(object, "content_text")
	}

	if raw, found := object["date_modified"]; found {
		err = json.Unmarshal(raw, &a.DateModified)
		if err != nil {
			return fmt.Errorf("error reading 'date_modified': %w", err)
		}
		delete(object, "date_modified")
	}

	if raw, found := object["date_published"]; found {
		err = json.Unmarshal(raw, &a.DatePublished)
		if err != nil {
			return fmt.Errorf("error reading 'date_published': %w", err)
		}
		delete(object, "date_published")
	}

	if raw, found := object["external_url"]; found {
		err = json.Unmarshal(raw, &a.ExternalURL)
		if err != nil {
			return fmt.Errorf("error reading 'external_url': %w", err)
		}
		delete(object, "external_url")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.ID)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["image"]; found {
		err = json.Unmarshal(raw, &a.Image)
		if err != nil {
			return fmt.Errorf("error reading 'image': %w", err)
		}
		delete(object, "image")
	}

	if raw, found := object["language"]; found {
		err = json.Unmarshal(raw, &a.Language)
		if err != nil {
			return fmt.Errorf("error reading 'language': %w", err)
		}
		delete(object, "language")
	}

	if raw, found := object["summary"]; found {
		err = json.Unmarshal(raw, &a.Summary)
		if err != nil {
			return fmt.Errorf("error reading 'summary': %w", err)
		}
		delete(object, "summary")
	}

	if raw, found := object["tags"]; found {
		err = json.Unmarshal(raw, &a.Tags)
		if err != nil {
			return fmt.Errorf("error reading 'tags': %w", err)
		}
		delete(object, "tags")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.URL)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Item to handle AdditionalProperties
func (a Item) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Attachments != nil {
		object["attachments"], err = json.Marshal(a.Attachments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'attachments': %w", err)
		}
	}

	if a.Author != nil {
		object["author"], err = json.Marshal(a.Author)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'author': %w", err)
		}
	}

	if a.Authors != nil {
		object["authors"], err = json.Marshal(a.Authors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authors': %w", err)
		}
	}

	if a.BannerImage != nil {
		object["banner_image"], err = json.Marshal(a.BannerImage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'banner_image': %w", err)
		}
	}

	if a.ContentHTML != nil {
		object["content_html"], err = json.Marshal(a.ContentHTML)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content_html': %w", err)
		}
	}

	if a.ContentText != nil {
		object["content_text"], err = json.Marshal(a.ContentText)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content_text': %w", err)
		}
	}

	if a.DateModified != nil {
		object["date_modified"], err = json.Marshal(a.DateModified)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'date_modified': %w", err)
		}
	}

	if a.DatePublished != nil {
		object["date_published"], err = json.Marshal(a.DatePublished)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'date_published': %w", err)
		}
	}

	if a.ExternalURL != nil {
		object["external_url"], err = json.Marshal(a.ExternalURL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'external_url': %w", err)
		}
	}

	object["id"], err = json.Marshal(a.ID)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if a.Image != nil {
		object["image"], err = json.Marshal(a.Image)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'image': %w", err)
		}
	}

	if a.Language != nil {
		object["language"], err = json.Marshal(a.Language)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'language': %w", err)
		}
	}

	if a.Summary != nil {
		object["summary"], err = json.Marshal(a.Summary)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'summary': %w", err)
		}
	}

	if a.Tags != nil {
		object["tags"], err = json.Marshal(a.Tags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tags': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.URL != nil {
		object["url"], err = json.Marshal(a.URL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
