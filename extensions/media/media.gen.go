// Package media provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package media

import (
	externalRef0 "github.com/immanent-tech/go-syndication/extensions/dc"
	externalRef1 "github.com/immanent-tech/go-syndication/types"
)

// Defines values for MediaContentExpression.
const (
	Full    MediaContentExpression = "full"
	Nonstop MediaContentExpression = "nonstop"
	Sample  MediaContentExpression = "sample"
)

// Defines values for MediaContentMedium.
const (
	MediaContentMediumAudio      MediaContentMedium = "audio"
	MediaContentMediumDocument   MediaContentMedium = "document"
	MediaContentMediumExecutable MediaContentMedium = "executable"
	MediaContentMediumImage      MediaContentMedium = "image"
	MediaContentMediumVideo      MediaContentMedium = "video"
)

// Defines values for MediaHashAlgo.
const (
	Md5  MediaHashAlgo = "md5"
	Sha1 MediaHashAlgo = "sha-1"
)

// Defines values for MediaPriceType.
const (
	Package      MediaPriceType = "package"
	Purchase     MediaPriceType = "purchase"
	Rent         MediaPriceType = "rent"
	Subscription MediaPriceType = "subscription"
)

// Defines values for MediaRestrictionRelationship.
const (
	Allow MediaRestrictionRelationship = "allow"
	Deny  MediaRestrictionRelationship = "deny"
)

// Defines values for MediaRestrictionType.
const (
	Country MediaRestrictionType = "country"
	Sharing MediaRestrictionType = "sharing"
	Uri     MediaRestrictionType = "uri"
)

// Defines values for MediaRightsStatus.
const (
	Official    MediaRightsStatus = "official"
	UserCreated MediaRightsStatus = "userCreated"
)

// Defines values for MediaStatusState.
const (
	Active  MediaStatusState = "active"
	Blocked MediaStatusState = "blocked"
	Deleted MediaStatusState = "deleted"
)

// Defines values for Medium.
const (
	MediumAudio      Medium = "audio"
	MediumDocument   Medium = "document"
	MediumExecutable Medium = "executable"
	MediumImage      Medium = "image"
	MediumVideo      Medium = "video"
)

// Defines values for TextType.
const (
	Html  TextType = "html"
	Plain TextType = "plain"
)

// Label is the human readable label that can be displayed in end user applications.
type Label = string

// MediaBacklink is a backlink pointing to the media object.
type MediaBacklink struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaBacklinks allows inclusion of all the URLs pointing to a media object.
type MediaBacklinks = []MediaBacklink

// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
type MediaCategory struct {
	// Label is the human readable label that can be displayed in end user applications.
	Label Label `json:"label,omitempty,omitzero" xml:"label,attr,omitempty"`

	// Scheme is the URI that identifies the scheme used by the element.
	Scheme Scheme `json:"scheme,omitempty,omitzero" validate:"omitempty,uri" xml:"scheme,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaComment is a comments a media object has received.
type MediaComment struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaComments is a list of comments the media object has received.
type MediaComments = []MediaComment

// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
type MediaCommunity struct {
	// StarRating specifies the rating-related information about a media object.
	StarRating *MediaCommunityStarRating `json:"media_star_rating,omitempty" xml:"https://search.yahoo.com/mrss/ media:starRating,omitempty"`

	// Statistics specifies various statistics about a media object like the view count and the favorite count.
	Statistics *MediaCommunityStatistics `json:"media_community_statistics,omitempty" xml:"https://search.yahoo.com/mrss/ media:statistics,omitempty"`

	// Tags contains user-generated tags separated by commas in the decreasing order of each tag's weight. Each tag can be assigned an integer weight in tag_name:weight format. It's up to the provider to choose the way weight is determined for a tag; for example, number of occurences can be one way to decide weight of a particular tag.
	Tags *MediaCommunityTags `json:"media_community_tags,omitempty" xml:"https://search.yahoo.com/mrss/ media:tags,omitempty"`
}

// MediaCommunityStarRating specifies the rating-related information about a media object.
type MediaCommunityStarRating struct {
	Average float32 `json:"average" xml:"average,attr"`
	Count   int     `json:"count" xml:"count,attr"`
	Max     float32 `json:"max" xml:"max,attr"`
	Min     float32 `json:"min" xml:"min,attr"`
}

// MediaCommunityStatistics specifies various statistics about a media object like the view count and the favorite count.
type MediaCommunityStatistics struct {
	Favorites int `json:"favorites" xml:"favorites,attr"`
	Views     int `json:"views" xml:"views,attr"`
}

// MediaCommunityTags contains user-generated tags separated by commas in the decreasing order of each tag's weight. Each tag can be assigned an integer weight in tag_name:weight format. It's up to the provider to choose the way weight is determined for a tag; for example, number of occurences can be one way to decide weight of a particular tag.
type MediaCommunityTags struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaContent defines model for MediaContent.
type MediaContent struct {
	// DCContributor is an entity responsible for making contributions to the resource.
	DCContributor *externalRef0.DCContributor `json:"dc_contributor,omitempty" xml:"http://purl.org/dc/elements/1.1/ contributor,omitempty"`

	// DCCoverage is the spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.
	DCCoverage *externalRef0.DCCoverage `json:"dc_coverage,omitempty" xml:"http://purl.org/dc/elements/1.1/ coverage,omitempty"`

	// DCCreator is an entity primarily responsible for making the resource.
	DCCreator *externalRef0.DCCreator `json:"dc_creator,omitempty" xml:"http://purl.org/dc/elements/1.1/ creator,omitempty"`

	// DCDate is a point or period of time associated with an event in the lifecycle of the resource.
	DCDate *externalRef0.DCDate `json:"dc_date,omitempty" xml:"http://purl.org/dc/elements/1.1/ date,omitempty"`

	// DCDescription may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content.
	DCDescription *externalRef0.DCDescription `json:"dc_description,omitempty" xml:"http://purl.org/dc/elements/1.1/ description,omitempty"`

	// DCFormat is the file format, physical medium, or dimensions of the resource.
	DCFormat *externalRef0.DCFormat `json:"dc_format,omitempty" xml:"http://purl.org/dc/elements/1.1/ format,omitempty"`

	// DCIdentifier is an unambiguous reference to the resource within a given context.
	DCIdentifier *externalRef0.DCIdentifier `json:"dc_identifier,omitempty" xml:"http://purl.org/dc/elements/1.1/ identifier,omitempty"`

	// DCLanguage identifies the language used by the related resource using an HTML language code.
	DCLanguage externalRef0.DCLanguage `json:"dc_language,omitempty" validate:"omitempty,bcp47_language_tag" xml:"http://purl.org/dc/elements/1.1/ language,omitempty"`

	// DCPublisher is an entity responsible for making the resource available.
	DCPublisher *externalRef0.DCPublisher `json:"dc_publisher,omitempty" xml:"http://purl.org/dc/elements/1.1/ publisher,omitempty"`

	// DCRelation is a related resource.
	DCRelation *externalRef0.DCRelation `json:"dc_relation,omitempty" xml:"http://purl.org/dc/elements/1.1/ relation,omitempty"`

	// DCRights is information about rights held in and over the resource.
	DCRights *externalRef0.DCRights `json:"dc_rights,omitempty" xml:"http://purl.org/dc/elements/1.1/ rights,omitempty"`

	// DCSource is a related resource from which the described resource is derived.
	DCSource *externalRef0.DCSource `json:"dc_source,omitempty" xml:"http://purl.org/dc/elements/1.1/ source,omitempty"`

	// DCSubject is the topic of the resource.
	DCSubject *externalRef0.DCSubject `json:"dc_subject,omitempty" xml:"http://purl.org/dc/elements/1.1/ subject,omitempty"`

	// DCTitle is a name by which the resource is formally known.
	DCTitle *externalRef0.DCTitle `json:"dc_title,omitempty" xml:"http://purl.org/dc/elements/1.1/ title,omitempty"`

	// DCType is the nature or genre of the resource.
	DCType *externalRef0.DCType `json:"dc_type,omitempty" xml:"http://purl.org/dc/elements/1.1/ type,omitempty"`

	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks MediaBacklinks `json:"media_backlinks,omitempty" xml:"https://search.yahoo.com/mrss/ media:backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *MediaCategory `json:"media_category" xml:"https://search.yahoo.com/mrss/ media:category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments MediaComments `json:"MediaComments,omitempty,omitzero"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *MediaCommunity `json:"media_community" xml:"https://search.yahoo.com/mrss/ media:community,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *MediaCopyright `json:"media_copyright" xml:"https://search.yahoo.com/mrss/ media:copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits MediaCredits `json:"media_credits" xml:"credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *MediaDescription `json:"media_description" xml:"https://search.yahoo.com/mrss/ media:description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *MediaEmbed `json:"media_embed" xml:"https://search.yahoo.com/mrss/ media:embed,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes MediaHashes `json:"media_hashes" xml:"hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *MediaKeywords `json:"media_keywords" xml:"https://search.yahoo.com/mrss/ media:keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *MediaLicense `json:"media_license" xml:"https://search.yahoo.com/mrss/ media:license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *MediaPeerLink `json:"media_peerlink" xml:"https://search.yahoo.com/mrss/ media:peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *MediaPlayer `json:"media_player" xml:"https://search.yahoo.com/mrss/ media:player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *MediaPrice `json:"media_price" xml:"https://search.yahoo.com/mrss/ media:price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *MediaRating `json:"media_rating" xml:"https://search.yahoo.com/mrss/ media:rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses MediaResponses `json:"media_responses" xml:"https://search.yahoo.com/mrss/ media:response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *MediaRestriction `json:"media_restriction" xml:"https://search.yahoo.com/mrss/ media:restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *MediaRights `json:"media_rights" xml:"https://search.yahoo.com/mrss/ media:rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes MediaScenes `json:"media_scenes" xml:"https://search.yahoo.com/mrss/ media:scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *MediaStatus `json:"media_status" xml:"https://search.yahoo.com/mrss/ media:status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *MediaSubTitle `json:"media_subtitle,omitempty" xml:"https://search.yahoo.com/mrss/ media:subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts MediaTexts `json:"media_texts" xml:"text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails MediaThumbnails `json:"media_thumbnails" xml:"thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *MediaTitle `json:"media_title" xml:"https://search.yahoo.com/mrss/ media:title,omitempty"`

	// Bitrate is the kilobits per second rate of media.
	Bitrate externalRef1.AttrBitrate `json:"bitrate,omitempty,omitzero" validate:"omitempty,number" xml:"bitrate,attr"`

	// Channels is number of audio channels in the media object.
	Channels externalRef1.AttrChannels `json:"channels,omitempty,omitzero" validate:"omitempty,number" xml:"channels,attr"`

	// Duration is the number of seconds the media object plays.
	Duration externalRef1.AttrDuration `json:"duration,omitempty,omitzero" validate:"omitempty,number" xml:"duration,attr"`

	// Expression determines if the object is a sample or the full version of the object, or even if it is a continuous stream.
	Expression MediaContentExpression `json:"expression,omitempty,omitzero" validate:"omitempty,oneof=sample full nonstop" xml:"expression,attr"`

	// FileSize is the number of bytes of the media object.
	FileSize externalRef1.AttrFileSize `json:"fileSize,omitempty,omitzero" xml:"fileSize,attr,omitempty"`

	// Framerate is the number of frames per second for the media object.
	Framerate externalRef1.AttrFramerate `json:"framerate,omitempty,omitzero" validate:"omitempty,number" xml:"framerate,attr"`

	// Height is the height of the media object.
	Height externalRef1.AttrHeight `json:"height,omitempty,omitzero" validate:"omitempty,number" xml:"height,attr"`

	// IsDefault determines if this is the default object that should be used for the <media:group>. There should only be one default object per <media:group>.
	IsDefault string `json:"isDefault,omitempty,omitzero" validate:"omitempty,boolean" xml:"isDefault,attr"`

	// Lang is the primary language encapsulated in the element. Language codes possible are detailed in RFC 3066. This attribute is used similar to the xml:lang attribute detailed in the XML 1.0 Specification (Third Edition).
	Lang externalRef1.AttrLang `json:"lang,omitempty,omitzero" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr"`

	// Medium is the type of object (image | audio | video | document | executable). While this attribute can at times seem redundant if type is supplied, it is included because it simplifies decision making on the reader side, as well as flushes out any ambiguities between MIME type and object type.
	Medium MediaContentMedium `json:"medium,omitempty,omitzero" validate:"omitempty,oneof=image audio video document executable" xml:"medium,attr"`

	// Samplingrate is the number of samples per second taken to create the media object. It is expressed in thousands of samples per second (kHz)
	Samplingrate externalRef1.AttrSamplingrate `json:"samplingrate,omitempty,omitzero" validate:"omitempty,number" xml:"samplingrate,attr"`

	// Type is the standard MIME type of the object.
	Type externalRef1.AttrMimeType `json:"type,omitempty,omitzero" xml:"type,attr,omitempty"`

	// Url is a URL that represents the element content.
	Url externalRef1.AttrURL `json:"url" validate:"omitempty,url" xml:"url,attr,omitempty"`

	// Width is the width of the media object. It is an optional attribute.
	Width externalRef1.AttrWidth `json:"width,omitempty,omitzero" validate:"omitempty,number" xml:"width,attr"`
}

// MediaContentExpression determines if the object is a sample or the full version of the object, or even if it is a continuous stream.
type MediaContentExpression string

// MediaContentMedium is the type of object (image | audio | video | document | executable). While this attribute can at times seem redundant if type is supplied, it is included because it simplifies decision making on the reader side, as well as flushes out any ambiguities between MIME type and object type.
type MediaContentMedium string

// MediaCopyright is copyright information for the media object.
type MediaCopyright struct {
	// Url is a URL that represents the element content.
	Url externalRef1.AttrURL `json:"url,omitempty,omitzero" validate:"omitempty,url" xml:"url,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaCredit Notable entity and the contribution to the creation of the media object. Current entities can include people, companies, locations, etc. Specific entities can have multiple roles, and several entities can have the same role.
type MediaCredit struct {
	// Role specifies the role the entity played.
	Role string `json:"role,omitempty,omitzero" validate:"omitempty,lowercase" xml:"role,attr,omitempty"`

	// Scheme is the URI that identifies the scheme used by the element.
	Scheme Scheme `json:"scheme,omitempty,omitzero" validate:"omitempty,uri" xml:"scheme,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaCredits a list of credits for the object.
type MediaCredits = []MediaCredit

// MediaDescription is a short description describing the media object typically a sentence in length.
type MediaDescription struct {
	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type,omitempty,omitzero" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaElements is the list of optional elements that can be sub-elements of <media:group>, <media:content>, <channel> or <item> elements.
type MediaElements struct {
	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks MediaBacklinks `json:"media_backlinks,omitempty" xml:"https://search.yahoo.com/mrss/ media:backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *MediaCategory `json:"media_category" xml:"https://search.yahoo.com/mrss/ media:category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments MediaComments `json:"MediaComments,omitempty,omitzero"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *MediaCommunity `json:"media_community" xml:"https://search.yahoo.com/mrss/ media:community,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *MediaCopyright `json:"media_copyright" xml:"https://search.yahoo.com/mrss/ media:copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits MediaCredits `json:"media_credits" xml:"credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *MediaDescription `json:"media_description" xml:"https://search.yahoo.com/mrss/ media:description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *MediaEmbed `json:"media_embed" xml:"https://search.yahoo.com/mrss/ media:embed,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes MediaHashes `json:"media_hashes" xml:"hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *MediaKeywords `json:"media_keywords" xml:"https://search.yahoo.com/mrss/ media:keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *MediaLicense `json:"media_license" xml:"https://search.yahoo.com/mrss/ media:license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *MediaPeerLink `json:"media_peerlink" xml:"https://search.yahoo.com/mrss/ media:peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *MediaPlayer `json:"media_player" xml:"https://search.yahoo.com/mrss/ media:player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *MediaPrice `json:"media_price" xml:"https://search.yahoo.com/mrss/ media:price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *MediaRating `json:"media_rating" xml:"https://search.yahoo.com/mrss/ media:rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses MediaResponses `json:"media_responses" xml:"https://search.yahoo.com/mrss/ media:response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *MediaRestriction `json:"media_restriction" xml:"https://search.yahoo.com/mrss/ media:restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *MediaRights `json:"media_rights" xml:"https://search.yahoo.com/mrss/ media:rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes MediaScenes `json:"media_scenes" xml:"https://search.yahoo.com/mrss/ media:scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *MediaStatus `json:"media_status" xml:"https://search.yahoo.com/mrss/ media:status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *MediaSubTitle `json:"media_subtitle,omitempty" xml:"https://search.yahoo.com/mrss/ media:subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts MediaTexts `json:"media_texts" xml:"text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails MediaThumbnails `json:"media_thumbnails" xml:"thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *MediaTitle `json:"media_title" xml:"https://search.yahoo.com/mrss/ media:title,omitempty"`
}

// MediaEmbed defines model for MediaEmbed.
type MediaEmbed struct {
	// Height is the height of the media object.
	Height externalRef1.AttrHeight `json:"height,omitempty,omitzero" validate:"omitempty,number" xml:"height,attr"`

	// Params is a list of player-specific parameters.
	Params []MediaParam         `json:"param,omitempty" xml:"https://search.yahoo.com/mrss/ media:param,omitempty"`
	Url    externalRef1.AttrURL `json:"url" validate:"required,url" xml:"url,attr"`

	// Width is the width of the media object. It is an optional attribute.
	Width externalRef1.AttrWidth `json:"width,omitempty,omitzero" validate:"omitempty,number" xml:"width,attr"`
}

// MediaGroup defines model for MediaGroup.
type MediaGroup struct {
	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks MediaBacklinks `json:"media_backlinks,omitempty" xml:"https://search.yahoo.com/mrss/ media:backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *MediaCategory `json:"media_category" xml:"https://search.yahoo.com/mrss/ media:category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments MediaComments `json:"MediaComments,omitempty,omitzero"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *MediaCommunity `json:"media_community" xml:"https://search.yahoo.com/mrss/ media:community,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *MediaCopyright `json:"media_copyright" xml:"https://search.yahoo.com/mrss/ media:copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits MediaCredits `json:"media_credits" xml:"credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *MediaDescription `json:"media_description" xml:"https://search.yahoo.com/mrss/ media:description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *MediaEmbed `json:"media_embed" xml:"https://search.yahoo.com/mrss/ media:embed,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes MediaHashes `json:"media_hashes" xml:"hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *MediaKeywords `json:"media_keywords" xml:"https://search.yahoo.com/mrss/ media:keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *MediaLicense `json:"media_license" xml:"https://search.yahoo.com/mrss/ media:license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *MediaPeerLink `json:"media_peerlink" xml:"https://search.yahoo.com/mrss/ media:peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *MediaPlayer `json:"media_player" xml:"https://search.yahoo.com/mrss/ media:player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *MediaPrice `json:"media_price" xml:"https://search.yahoo.com/mrss/ media:price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *MediaRating `json:"media_rating" xml:"https://search.yahoo.com/mrss/ media:rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses MediaResponses `json:"media_responses" xml:"https://search.yahoo.com/mrss/ media:response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *MediaRestriction `json:"media_restriction" xml:"https://search.yahoo.com/mrss/ media:restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *MediaRights `json:"media_rights" xml:"https://search.yahoo.com/mrss/ media:rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes MediaScenes `json:"media_scenes" xml:"https://search.yahoo.com/mrss/ media:scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *MediaStatus `json:"media_status" xml:"https://search.yahoo.com/mrss/ media:status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *MediaSubTitle `json:"media_subtitle,omitempty" xml:"https://search.yahoo.com/mrss/ media:subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts MediaTexts `json:"media_texts" xml:"text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails MediaThumbnails `json:"media_thumbnails" xml:"thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *MediaTitle `json:"media_title" xml:"https://search.yahoo.com/mrss/ media:title,omitempty"`

	// Content is the list of <media:content> elements
	Content []MediaContent `json:"content,omitempty" xml:"https://search.yahoo.com/mrss/ media:content,omitempty"`
}

// MediaHash is the hash of the binary media file. Elements represents hashes in different alogrithms.
type MediaHash struct {
	// Algo indicates the algorithm used to create the hash.
	Algo MediaHashAlgo `json:"algo,omitempty,omitzero" xml:"algo,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaHashAlgo indicates the algorithm used to create the hash.
type MediaHashAlgo string

// MediaHashes a list of hashes for the object.
type MediaHashes = []MediaHash

// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
type MediaKeywords struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaLicense link to specify the machine-readable license associated with the content.
type MediaLicense struct {
	// Href is a URL that represents the element content.
	Href externalRef1.AttrHref `json:"href,omitempty,omitzero" validate:"omitempty,url" xml:"href,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type,omitempty,omitzero" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaParam is a key-value pair that defines player-specific values for an Embed element.
type MediaParam struct {
	// Name is the name of the param.
	Name string `json:"name" xml:"name,attr"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaPeerLink contains P2P link.
type MediaPeerLink struct {
	// Href is a URL that represents the element content.
	Href externalRef1.AttrHref `json:"href" validate:"omitempty,url" xml:"href,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`
}

// MediaPlayer allows the media object to be accessed through a web browser media player console.
type MediaPlayer struct {
	// Height is the height of the media object.
	Height externalRef1.AttrHeight `json:"height,omitempty,omitzero" validate:"omitempty,number" xml:"height,attr"`
	Url    externalRef1.AttrURL    `json:"url" validate:"required,url" xml:"url,attr"`

	// Width is the width of the media object. It is an optional attribute.
	Width externalRef1.AttrWidth `json:"width,omitempty,omitzero" validate:"omitempty,number" xml:"width,attr"`
}

// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
type MediaPrice struct {
	// Currency is the currency code of the price.
	Currency string `json:"currency,omitempty,omitzero" validate:"omitempty,iso4217" xml:"currency,attr,omitempty"`

	// Info is a URL pointing to package or subscription information.
	Info string `json:"info,omitempty,omitzero" validate:"omitempty,url" xml:"info,attr,omitempty"`

	// Price is the price of the media object.
	Price float32 `json:"price,omitempty,omitzero" validate:"omitempty,numeric" xml:"price,attr,omitempty"`

	// Type is the type of pricing for the media object.
	Type MediaPriceType `json:"type,omitempty,omitzero" validate:"omitempty,oneof=rent purchase package subscription" xml:"type,attr,omitempty"`
}

// MediaPriceType is the type of pricing for the media object.
type MediaPriceType string

// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
type MediaRating struct {
	// Scheme is the URI that identifies the scheme used by the element.
	Scheme Scheme `json:"scheme,omitempty,omitzero" validate:"omitempty,uri" xml:"scheme,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaResponse is a response a media object has received.
type MediaResponse struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaResponses allows inclusion of a list of all media responses a media object has received.
type MediaResponses = []MediaResponse

// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
type MediaRestriction struct {
	// Relationship indicates the type of relationship that the restriction represents.
	Relationship MediaRestrictionRelationship `json:"relationship" xml:"relationship,attr"`

	// Type specifies the type of restriction.
	Type MediaRestrictionType `json:"type,omitempty,omitzero" xml:"sharing,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaRestrictionRelationship indicates the type of relationship that the restriction represents.
type MediaRestrictionRelationship string

// MediaRestrictionType specifies the type of restriction.
type MediaRestrictionType string

// MediaRights specifies the rights information of a media object.
type MediaRights struct {
	// Status is the status of the media object saying whether a media object has been created by the publisher or they have rights to circulate it.
	Status MediaRightsStatus `json:"status" validate:"omitempty,oneof=userCreated official" xml:"status,attr"`
}

// MediaRightsStatus is the status of the media object saying whether a media object has been created by the publisher or they have rights to circulate it.
type MediaRightsStatus string

// MediaScene contains information about a particular scene.
type MediaScene struct {
	SceneDescription SceneDescription `json:"sceneDescription,omitempty" xml:"sceneDescription,omitempty"`
	SceneEndTime     SceneEndTime     `json:"sceneEndTime,omitempty" xml:"sceneEndTime,omitempty"`
	SceneStartTime   SceneStartTime   `json:"sceneStartTime,omitempty" xml:"sceneStartTime,omitempty"`
	SceneTitle       SceneTitle       `json:"sceneTitle,omitempty" xml:"sceneTitle,omitempty"`
}

// MediaScenes specifies various scenes within a media object.
type MediaScenes = []MediaScene

// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
type MediaStatus struct {
	// Reason is a reason explaining why a media object has been blocked/deleted.
	Reason string `json:"reason" xml:"reason,attr"`

	// State indicates the status.
	State MediaStatusState `json:"state" validate:"omitempty,oneof=active blocked deleted" xml:"state,attr"`
}

// MediaStatusState indicates the status.
type MediaStatusState string

// MediaSubTitle contains subtitle/CC link.
type MediaSubTitle struct {
	// Href is a URL that represents the element content.
	Href externalRef1.AttrHref `json:"href,omitempty,omitzero" validate:"omitempty,url" xml:"href,attr,omitempty"`

	// Lang is the primary language encapsulated in the element. Language codes possible are detailed in RFC 3066. This attribute is used similar to the xml:lang attribute detailed in the XML 1.0 Specification (Third Edition).
	Lang externalRef1.AttrLang `json:"lang" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr"`

	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`
}

// MediaText allows the inclusion of a text transcript, closed captioning or lyrics of the media content.
type MediaText struct {
	// End specifies the end time offset that the text ends being relevant to the media object. An example of this would be for closed captioning. It uses the NTP time code format.
	End string `json:"end,omitempty,omitzero" xml:"end,attr,omitempty"`

	// Lang is the primary language encapsulated in the element. Language codes possible are detailed in RFC 3066. This attribute is used similar to the xml:lang attribute detailed in the XML 1.0 Specification (Third Edition).
	Lang externalRef1.AttrLang `json:"lang,omitempty,omitzero" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr"`

	// Start specifies the start time offset that the text starts being relevant to the media object. An example of this would be for closed captioning. It uses the NTP time code format.
	Start string `json:"start,omitempty,omitzero" xml:"start,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type,omitempty,omitzero" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaTexts a list of texts for the object.
type MediaTexts = []MediaText

// MediaThumbnail allows a particular images to be used as a representative image for the media object.
type MediaThumbnail struct {
	// Height is the height of the media object.
	Height externalRef1.AttrHeight `json:"height,omitempty,omitzero" validate:"omitempty,number" xml:"height,attr"`

	// Time specifies the time offset in relation to the media object. Typically this is used when creating multiple keyframes within a single video. The format for this attribute should be in the DSM-CC's Normal Play Time (NTP) as used in RTSP
	Time string               `json:"time,omitempty,omitzero" xml:"time,attr,omitempty"`
	URL  externalRef1.AttrURL `json:"url" validate:"required,url" xml:"url,attr"`

	// Width is the width of the media object. It is an optional attribute.
	Width externalRef1.AttrWidth `json:"width,omitempty,omitzero" validate:"omitempty,number" xml:"width,attr"`
}

// MediaThumbnails a list of thumbnails for the object.
type MediaThumbnails = []MediaThumbnail

// MediaTitle is the title of the particular media object.
type MediaTitle struct {
	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type,omitempty,omitzero" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// Medium is the type of object.
type Medium string

// SceneDescription defines model for SceneDescription.
type SceneDescription struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// SceneEndTime defines model for SceneEndTime.
type SceneEndTime struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// SceneStartTime defines model for SceneStartTime.
type SceneStartTime struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// SceneTitle defines model for SceneTitle.
type SceneTitle struct {
	// Value is an element value that is required.
	Value externalRef1.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// Scheme is the URI that identifies the scheme used by the element.
type Scheme = string

// TextType specifies the type of text embedded in the element.
type TextType string
