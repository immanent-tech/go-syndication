// Package mrss provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package mrss

import (
	externalRef0 "github.com/joshuar/go-feed-me/models/feeds/types"
)

// Defines values for Expression.
const (
	Full    Expression = "full"
	Nonstop Expression = "nonstop"
	Sample  Expression = "sample"
)

// Defines values for MediaHashAlgo.
const (
	Md5  MediaHashAlgo = "md5"
	Sha1 MediaHashAlgo = "sha-1"
)

// Defines values for MediaPriceType.
const (
	Package      MediaPriceType = "package"
	Purchase     MediaPriceType = "purchase"
	Rent         MediaPriceType = "rent"
	Subscription MediaPriceType = "subscription"
)

// Defines values for MediaRestrictionRelationship.
const (
	Allow MediaRestrictionRelationship = "allow"
	Deny  MediaRestrictionRelationship = "deny"
)

// Defines values for MediaRestrictionType.
const (
	Country MediaRestrictionType = "country"
	Sharing MediaRestrictionType = "sharing"
	Uri     MediaRestrictionType = "uri"
)

// Defines values for MediaRightsStatus.
const (
	Official    MediaRightsStatus = "official"
	UserCreated MediaRightsStatus = "userCreated"
)

// Defines values for MediaStatusState.
const (
	Active  MediaStatusState = "active"
	Blocked MediaStatusState = "blocked"
	Deleted MediaStatusState = "deleted"
)

// Defines values for Medium.
const (
	Audio      Medium = "audio"
	Document   Medium = "document"
	Executable Medium = "executable"
	Image      Medium = "image"
	Video      Medium = "video"
)

// Defines values for TextType.
const (
	Html  TextType = "html"
	Plain TextType = "plain"
)

// Bitrate is the kilobits per second rate of media.
type Bitrate = int

// Channels is number of audio channels in the media object.
type Channels = int

// Duration is the number of seconds the media object plays.
type Duration = int

// Expression determines if the object is a sample or the full version of the object, or even if it is a continuous stream.
type Expression string

// FileSize is the number of bytes of the media object.
type FileSize = int

// Framerate is the number of frames per second for the media object.
type Framerate = int

// Height is the height of the media object.
type Height = int

// Href should specify the direct URL to the media object.
type Href = string

// IsDefault determines if this is the default object that should be used for the <media:group>.
type IsDefault = bool

// Label is the human readable label that can be displayed in end user applications.
type Label = string

// Lang is the primary language encapsulated in the media object. Language codes possible are detailed in RFC 3066.
type Lang = string

// MediaBacklink is a backlink pointing to the media object.
type MediaBacklink struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaBacklinks allows inclusion of all the URLs pointing to a media object.
type MediaBacklinks = []MediaBacklink

// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
type MediaCategory struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Label is the human readable label that can be displayed in end user applications.
	Label *Label `json:"label,omitempty" xml:"label,attr,omitempty"`

	// Scheme is the URI that identifies the scheme used by the element.
	Scheme *Scheme `json:"scheme,omitempty" validate:"omitempty,uri" xml:"scheme,attr,omitempty"`
}

// MediaComment is a comments a media object has received.
type MediaComment struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaComments is a list of comments the media object has received.
type MediaComments = []MediaComment

// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
type MediaCommunity struct {
	// StarRating specifies the rating-related information about a media object.
	StarRating *MediaCommunityStarRating `json:"starRating,omitemtpy" xml:"http://search.yahoo.com/mrss/ starRating,omitemtpy"`

	// Statistics specifies various statistics about a media object like the view count and the favorite count.
	Statistics *MediaCommunityStatistics `json:"statistics,omitemtpy" xml:"http://search.yahoo.com/mrss/ statistics,omitemtpy"`

	// Tags contains user-generated tags separated by commas in the decreasing order of each tag's weight. Each tag can be assigned an integer weight in tag_name:weight format. It's up to the provider to choose the way weight is determined for a tag; for example, number of occurences can be one way to decide weight of a particular tag.
	Tags *MediaCommunityTags `json:"tags,omitemtpy" xml:"http://search.yahoo.com/mrss/ tags,omitemtpy"`
}

// MediaCommunityStarRating specifies the rating-related information about a media object.
type MediaCommunityStarRating struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`
	Average float32              `json:"average" xml:"average,attr"`
	Count   int                  `json:"count" xml:"count,attr"`
	Max     float32              `json:"max" xml:"max,attr"`
	Min     float32              `json:"min" xml:"min,attr"`
}

// MediaCommunityStatistics specifies various statistics about a media object like the view count and the favorite count.
type MediaCommunityStatistics struct {
	// XMLName represents the XML namespace of an element.
	XMLName   externalRef0.XMLName `json:"xml" validate:"required"`
	Favorites int                  `json:"favorites" xml:"favorites,attr"`
	Views     int                  `json:"views" xml:"views,attr"`
}

// MediaCommunityTags contains user-generated tags separated by commas in the decreasing order of each tag's weight. Each tag can be assigned an integer weight in tag_name:weight format. It's up to the provider to choose the way weight is determined for a tag; for example, number of occurences can be one way to decide weight of a particular tag.
type MediaCommunityTags struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaContent can be used to publish any type of media.
type MediaContent struct {
	// BackLinks allows inclusion of all the URLs pointing to a media object.
	BackLinks MediaBacklinks `json:"backLinks,omitempty" xml:"http://search.yahoo.com/mrss/ backLinks>backLink,omitempty"`

	// Bitrate is the kilobits per second rate of media.
	Bitrate *Bitrate `json:"bitrate,omitempty" xml:"bitrate,attr,omitempty"`

	// Category allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	Category *MediaCategory `json:"category,omitempty" xml:"http://search.yahoo.com/mrss/ category,omitempty"`

	// Channels is number of audio channels in the media object.
	Channels *Channels `json:"channels,omitempty" xml:"channels,attr,omitempty"`

	// Comments is a list of comments the media object has received.
	Comments MediaComments `json:"comments,omitempty" xml:"http://search.yahoo.com/mrss/ comments>comment,omitempty"`

	// Community stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	Community *MediaCommunity `json:"community,omitempty" xml:"http://search.yahoo.com/mrss/ community,omitempty"`

	// Copyright is copyright information for the media object.
	Copyright *MediaCopyright `json:"copyright,omitempty" xml:"http://search.yahoo.com/mrss/ copyright,omitempty"`

	// Credits a list of credits for the object.
	Credits MediaCredits `json:"credits,omitempty" xml:"http://search.yahoo.com/mrss/ credits>credit,omitempty"`

	// Description is a short description describing the media object typically a sentence in length.
	Description *MediaDescription `json:"description,omitempty" xml:"http://search.yahoo.com/mrss/ description,omitempty"`

	// Duration is the number of seconds the media object plays.
	Duration *Duration `json:"duration,omitempty" xml:"duration,attr,omitempty"`

	// Embed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	Embed *MediaEmbed `json:"embed,omitempty" xml:"http://search.yahoo.com/mrss/ embed,omitempty"`

	// Expression determines if the object is a sample or the full version of the object, or even if it is a continuous stream.
	Expression *Expression `json:"expression,omitempty" validate:"omitempty,oneof=sample full nonstop" xml:"expression,attr,omitempty"`

	// Extensions records any elements that are unknown extensions to the schema.
	Extensions []externalRef0.Extension `json:"extensions,omitempty" xml:",any"`

	// FileSize is the number of bytes of the media object.
	FileSize *FileSize `json:"fileSize,omitempty" xml:"fileSize,attr,omitempty"`

	// Framerate is the number of frames per second for the media object.
	Framerate *Framerate `json:"framerate,omitempty" xml:"framerate,attr,omitempty"`

	// Hashes a list of hashes for the object.
	Hashes MediaHashes `json:"hashes,omitempty" xml:"http://search.yahoo.com/mrss/ hash,omitempty"`

	// Height is the height of the media object.
	Height *Height `json:"height,omitempty" validate:"omitempty,number" xml:"height,attr,omitempty"`

	// IsDefault determines if this is the default object that should be used for the <media:group>.
	IsDefault *IsDefault `json:"isDefault,omitempty" xml:"isDefault,attr,omitempty"`

	// Keywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	Keywords *MediaKeywords `json:"keywords,omitempty" xml:"http://search.yahoo.com/mrss/ keywords,omitempty"`

	// Lang is the primary language encapsulated in the media object. Language codes possible are detailed in RFC 3066.
	Lang *Lang `json:"lang,omitempty" validate:"omitempty,bcp47_language_tag" xml:"lang,attr,omitempty"`

	// License link to specify the machine-readable license associated with the content.
	License *MediaLicense `json:"license,omitempty" xml:"http://search.yahoo.com/mrss/ license,omitempty"`

	// Medium is the type of object.
	Medium *Medium `json:"medium,omitempty" validate:"omitempty,oneof=image audio video document executable" xml:"medium,attr,omitempty"`

	// PeerLink contains P2P link.
	PeerLink *MediaPeerLink `json:"peerLink,omitempty" xml:"http://search.yahoo.com/mrss/ peerLink,omitempty"`

	// Player allows the media object to be accessed through a web browser media player console.
	Player *MediaPlayer `json:"player,omitempty" xml:"http://search.yahoo.com/mrss/ player,omitempty"`

	// Price includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	Price *MediaPrice `json:"price,omitempty" xml:"http://search.yahoo.com/mrss/ price,omitempty"`

	// Rating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	Rating *MediaRating `json:"rating,omitempty" xml:"http://search.yahoo.com/mrss/ rating,omitempty"`

	// Responses allows inclusion of a list of all media responses a media object has received.
	Responses MediaResponses `json:"responses,omitempty" xml:"http://search.yahoo.com/mrss/ responses>response,omitempty"`

	// Restriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	Restriction *MediaRestriction `json:"restriction,omitempty" xml:"http://search.yahoo.com/mrss/ restriction,omitempty"`

	// Rights specifies the rights information of a media object.
	Rights *MediaRights `json:"rights,omitempty" xml:"http://search.yahoo.com/mrss/ rights,omitempty"`

	// Samplingrate is the number of samples per second taken to create the media object. It is expressed in thousands of samples per second (kHz).
	Samplingrate *Samplerate `json:"samplingrate,omitempty" xml:"samplingrate,attr,omitempty"`

	// Scenes specifies various scenes within a media object.
	Scenes MediaScenes `json:"scenes,omitempty" xml:"http://search.yahoo.com/mrss/ scenes>scene,omitempty"`

	// Status specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	Status *MediaStatus `json:"status,omitempty" xml:"http://search.yahoo.com/mrss/ status,omitempty"`

	// SubTitle contains subtitle/CC link.
	SubTitle *MediaSubTitle `json:"subTitle,omitempty" xml:"http://search.yahoo.com/mrss/ subTitle,omitempty"`

	// Texts a list of texts for the object.
	Texts MediaTexts `json:"texts,omitempty" xml:"http://search.yahoo.com/mrss/ texts>text,omitempty"`

	// Thumbnails a list of thumbnails for the object.
	Thumbnails MediaThumbnails `json:"thumbnails,omitempty" xml:"http://search.yahoo.com/mrss/ thumbnail,omitempty"`

	// Title is the title of the particular media object.
	Title *MediaTitle `json:"title,omitempty" xml:"http://search.yahoo.com/mrss/ title,omitempty"`

	// Type is the standard MIME type of the object.
	Type *MimeType `json:"type,omitempty" xml:"type,attr,omitempty"`

	// URL should specify the direct URL to the media object.
	URL *URL `json:"url,omitempty" validate:"omitempty,url" xml:"url,attr,omitempty"`

	// Width is the height of the media object.
	Width *Width `json:"width,omitempty" validate:"omitempty,number" xml:"width,attr,omitempty"`
}

// MediaCopyright is copyright information for the media object.
type MediaCopyright struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// URL should specify the direct URL to the media object.
	URL *URL `json:"url,omitempty" validate:"omitempty,url" xml:"url,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaCredit Notable entity and the contribution to the creation of the media object. Current entities can include people, companies, locations, etc. Specific entities can have multiple roles, and several entities can have the same role.
type MediaCredit struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Role specifies the role the entity played.
	Role *string `json:"role,omitempty" validate:"omitempty,lowercase" xml:"role,attr,omitempty"`

	// Scheme is the URI that identifies the scheme used by the element.
	Scheme *Scheme `json:"scheme,omitempty" validate:"omitempty,uri" xml:"scheme,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaCredits a list of credits for the object.
type MediaCredits = []MediaCredit

// MediaDescription is a short description describing the media object typically a sentence in length.
type MediaDescription struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Type specifies the type of text embedded in the element.
	Type *TextType `json:"type,omitempty" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaElements is the list of optional elements that can be sub-elements of <media:group>, <media:content>, <channel> or <item> elements.
type MediaElements struct {
	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks MediaBacklinks `json:"backLinks,omitempty" xml:"http://search.yahoo.com/mrss/ backLinks>backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *MediaCategory `json:"MediaCategory,omitempty" xml:"http://search.yahoo.com/mrss/ category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments MediaComments `json:"MediaComments,omitempty" xml:"http://search.yahoo.com/mrss/ comments>comment,omitempty"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *MediaCommunity `json:"MediaCommunity,omitempty" xml:"http://search.yahoo.com/mrss/ community,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *MediaCopyright `json:"MediaCopyright,omitempty" xml:"http://search.yahoo.com/mrss/ copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits MediaCredits `json:"MediaCredits,omitempty" xml:"http://search.yahoo.com/mrss/ credits>credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *MediaDescription `json:"MediaDescription,omitempty" xml:"http://search.yahoo.com/mrss/ description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *MediaEmbed `json:"MediaEmbed,omitempty" xml:"http://search.yahoo.com/mrss/ embed,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes MediaHashes `json:"MediaHashes,omitempty" xml:"http://search.yahoo.com/mrss/ hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *MediaKeywords `json:"MediaKeywords,omitempty" xml:"http://search.yahoo.com/mrss/ keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *MediaLicense `json:"MediaLicense,omitempty" xml:"http://search.yahoo.com/mrss/ license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *MediaPeerLink `json:"MediaPeerLink,omitempty" xml:"http://search.yahoo.com/mrss/ peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *MediaPlayer `json:"MediaPlayer,omitempty" xml:"http://search.yahoo.com/mrss/ player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *MediaPrice `json:"MediaPrice,omitempty" xml:"http://search.yahoo.com/mrss/ price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *MediaRating `json:"MediaRating,omitempty" xml:"http://search.yahoo.com/mrss/ rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses MediaResponses `json:"MediaResponses,omitempty" xml:"http://search.yahoo.com/mrss/ responses>response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *MediaRestriction `json:"MediaRestriction,omitempty" xml:"http://search.yahoo.com/mrss/ restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *MediaRights `json:"MediaRights,omitempty" xml:"http://search.yahoo.com/mrss/ rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes MediaScenes `json:"MediaScenes,omitempty" xml:"http://search.yahoo.com/mrss/ scenes>scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *MediaStatus `json:"MediaStatus,omitempty" xml:"http://search.yahoo.com/mrss/ status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *MediaSubTitle `json:"subTitle,omitempty" xml:"http://search.yahoo.com/mrss/ subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts MediaTexts `json:"MediaTexts,omitempty" xml:"http://search.yahoo.com/mrss/ texts>text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails MediaThumbnails `json:"MediaThumbnails,omitempty" xml:"http://search.yahoo.com/mrss/ thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *MediaTitle `json:"MediaTitle,omitempty" xml:"http://search.yahoo.com/mrss/ title,omitempty"`
}

// MediaEmbed defines model for MediaEmbed.
type MediaEmbed struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Height is the height of the media object.
	Height *Height `json:"height,omitempty" validate:"omitempty,number" xml:"height,attr,omitempty"`

	// Params is a list of player-specific parameters.
	Params []MediaParam `json:"param,omitempty" xml:"http://search.yahoo.com/mrss/ param,omitempty"`
	Url    URL          `json:"url" validate:"required,url" xml:"url,attr"`

	// Width is the height of the media object.
	Width *Width `json:"width,omitempty" validate:"omitempty,number" xml:"width,attr,omitempty"`
}

// MediaGroup defines model for MediaGroup.
type MediaGroup struct {
	// BackLinks allows inclusion of all the URLs pointing to a media object.
	BackLinks MediaBacklinks `json:"backLinks,omitempty" xml:"http://search.yahoo.com/mrss/ backLinks>backLink,omitempty"`

	// Bitrate is the kilobits per second rate of media.
	Bitrate *Bitrate `json:"bitrate,omitempty" xml:"bitrate,attr,omitempty"`

	// Category allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	Category *MediaCategory `json:"category,omitempty" xml:"http://search.yahoo.com/mrss/ category,omitempty"`

	// Channels is number of audio channels in the media object.
	Channels *Channels `json:"channels,omitempty" xml:"channels,attr,omitempty"`

	// Comments is a list of comments the media object has received.
	Comments MediaComments `json:"comments,omitempty" xml:"http://search.yahoo.com/mrss/ comments>comment,omitempty"`

	// Community stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	Community *MediaCommunity `json:"community,omitempty" xml:"http://search.yahoo.com/mrss/ community,omitempty"`

	// Contents is the list of <media:content> elements
	Contents []MediaContent `json:"media_contents,omitempty" xml:"http://search.yahoo.com/mrss/ content,omitempty"`

	// Copyright is copyright information for the media object.
	Copyright *MediaCopyright `json:"copyright,omitempty" xml:"http://search.yahoo.com/mrss/ copyright,omitempty"`

	// Credits a list of credits for the object.
	Credits MediaCredits `json:"credits,omitempty" xml:"http://search.yahoo.com/mrss/ credits>credit,omitempty"`

	// Description is a short description describing the media object typically a sentence in length.
	Description *MediaDescription `json:"description,omitempty" xml:"http://search.yahoo.com/mrss/ description,omitempty"`

	// Duration is the number of seconds the media object plays.
	Duration *Duration `json:"duration,omitempty" xml:"duration,attr,omitempty"`

	// Embed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	Embed *MediaEmbed `json:"embed,omitempty" xml:"http://search.yahoo.com/mrss/ embed,omitempty"`

	// Expression determines if the object is a sample or the full version of the object, or even if it is a continuous stream.
	Expression *Expression `json:"expression,omitempty" validate:"omitempty,oneof=sample full nonstop" xml:"expression,attr,omitempty"`

	// Extensions records any elements that are unknown extensions to the schema.
	Extensions []externalRef0.Extension `json:"extensions,omitempty" xml:",any"`

	// FileSize is the number of bytes of the media object.
	FileSize *FileSize `json:"fileSize,omitempty" xml:"fileSize,attr,omitempty"`

	// Framerate is the number of frames per second for the media object.
	Framerate *Framerate `json:"framerate,omitempty" xml:"framerate,attr,omitempty"`

	// Hashes a list of hashes for the object.
	Hashes MediaHashes `json:"hashes,omitempty" xml:"http://search.yahoo.com/mrss/ hash,omitempty"`

	// Height is the height of the media object.
	Height *Height `json:"height,omitempty" validate:"omitempty,number" xml:"height,attr,omitempty"`

	// IsDefault determines if this is the default object that should be used for the <media:group>.
	IsDefault *IsDefault `json:"isDefault,omitempty" xml:"isDefault,attr,omitempty"`

	// Keywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	Keywords *MediaKeywords `json:"keywords,omitempty" xml:"http://search.yahoo.com/mrss/ keywords,omitempty"`

	// Lang is the primary language encapsulated in the media object. Language codes possible are detailed in RFC 3066.
	Lang *Lang `json:"lang,omitempty" validate:"omitempty,bcp47_language_tag" xml:"lang,attr,omitempty"`

	// License link to specify the machine-readable license associated with the content.
	License *MediaLicense `json:"license,omitempty" xml:"http://search.yahoo.com/mrss/ license,omitempty"`

	// Medium is the type of object.
	Medium *Medium `json:"medium,omitempty" validate:"omitempty,oneof=image audio video document executable" xml:"medium,attr,omitempty"`

	// PeerLink contains P2P link.
	PeerLink *MediaPeerLink `json:"peerLink,omitempty" xml:"http://search.yahoo.com/mrss/ peerLink,omitempty"`

	// Player allows the media object to be accessed through a web browser media player console.
	Player *MediaPlayer `json:"player,omitempty" xml:"http://search.yahoo.com/mrss/ player,omitempty"`

	// Price includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	Price *MediaPrice `json:"price,omitempty" xml:"http://search.yahoo.com/mrss/ price,omitempty"`

	// Rating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	Rating *MediaRating `json:"rating,omitempty" xml:"http://search.yahoo.com/mrss/ rating,omitempty"`

	// Responses allows inclusion of a list of all media responses a media object has received.
	Responses MediaResponses `json:"responses,omitempty" xml:"http://search.yahoo.com/mrss/ responses>response,omitempty"`

	// Restriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	Restriction *MediaRestriction `json:"restriction,omitempty" xml:"http://search.yahoo.com/mrss/ restriction,omitempty"`

	// Rights specifies the rights information of a media object.
	Rights *MediaRights `json:"rights,omitempty" xml:"http://search.yahoo.com/mrss/ rights,omitempty"`

	// Samplingrate is the number of samples per second taken to create the media object. It is expressed in thousands of samples per second (kHz).
	Samplingrate *Samplerate `json:"samplingrate,omitempty" xml:"samplingrate,attr,omitempty"`

	// Scenes specifies various scenes within a media object.
	Scenes MediaScenes `json:"scenes,omitempty" xml:"http://search.yahoo.com/mrss/ scenes>scene,omitempty"`

	// Status specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	Status *MediaStatus `json:"status,omitempty" xml:"http://search.yahoo.com/mrss/ status,omitempty"`

	// SubTitle contains subtitle/CC link.
	SubTitle *MediaSubTitle `json:"subTitle,omitempty" xml:"http://search.yahoo.com/mrss/ subTitle,omitempty"`

	// Texts a list of texts for the object.
	Texts MediaTexts `json:"texts,omitempty" xml:"http://search.yahoo.com/mrss/ texts>text,omitempty"`

	// Thumbnails a list of thumbnails for the object.
	Thumbnails MediaThumbnails `json:"thumbnails,omitempty" xml:"http://search.yahoo.com/mrss/ thumbnail,omitempty"`

	// Title is the title of the particular media object.
	Title *MediaTitle `json:"title,omitempty" xml:"http://search.yahoo.com/mrss/ title,omitempty"`

	// Type is the standard MIME type of the object.
	Type *MimeType `json:"type,omitempty" xml:"type,attr,omitempty"`

	// URL should specify the direct URL to the media object.
	URL *URL `json:"url,omitempty" validate:"omitempty,url" xml:"url,attr,omitempty"`

	// Width is the height of the media object.
	Width *Width `json:"width,omitempty" validate:"omitempty,number" xml:"width,attr,omitempty"`
}

// MediaHash is the hash of the binary media file. Elements represents hashes in different alogrithms.
type MediaHash struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Algo indicates the algorithm used to create the hash.
	Algo *MediaHashAlgo `json:"algo,omitempty" xml:"algo,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaHashAlgo indicates the algorithm used to create the hash.
type MediaHashAlgo string

// MediaHashes a list of hashes for the object.
type MediaHashes = []MediaHash

// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
type MediaKeywords struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaLicense link to specify the machine-readable license associated with the content.
type MediaLicense struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Href should specify the direct URL to the media object.
	Href *Href `json:"href,omitempty" validate:"omitempty,url" xml:"href,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type *TextType `json:"type,omitempty" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaParam is a key-value pair that defines player-specific values for an Embed element.
type MediaParam struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Name is the name of the param.
	Name string `json:"name" xml:"name,attr"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaPeerLink contains P2P link.
type MediaPeerLink struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Href should specify the direct URL to the media object.
	Href Href `json:"href" validate:"omitempty,url" xml:"href,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`
}

// MediaPlayer allows the media object to be accessed through a web browser media player console.
type MediaPlayer struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Height is the height of the media object.
	Height *Height `json:"height,omitempty" validate:"omitempty,number" xml:"height,attr,omitempty"`
	Url    URL     `json:"url" validate:"required,url" xml:"url,attr"`

	// Width is the height of the media object.
	Width *Width `json:"width,omitempty" validate:"omitempty,number" xml:"width,attr,omitempty"`
}

// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
type MediaPrice struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Currency is the currency code of the price.
	Currency *string `json:"currency,omitempty" validate:"omitempty,iso4217" xml:"currency,attr,omitempty"`

	// Info is a URL pointing to package or subscription information.
	Info *string `json:"info,omitempty" validate:"omitempty,url" xml:"info,attr,omitempty"`

	// Price is the price of the media object.
	Price *float32 `json:"price,omitempty" validate:"omitempty,numeric" xml:"price,attr,omitempty"`

	// Type is the type of pricing for the media object.
	Type *MediaPriceType `json:"type,omitempty" validate:"omitempty,oneof=rent purchase package subscription" xml:"type,attr,omitempty"`
}

// MediaPriceType is the type of pricing for the media object.
type MediaPriceType string

// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
type MediaRating struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Scheme is the URI that identifies the scheme used by the element.
	Scheme *Scheme `json:"scheme,omitempty" validate:"omitempty,uri" xml:"scheme,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaResponse is a response a media object has received.
type MediaResponse struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaResponses allows inclusion of a list of all media responses a media object has received.
type MediaResponses = []MediaResponse

// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
type MediaRestriction struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Relationship indicates the type of relationship that the restriction represents.
	Relationship MediaRestrictionRelationship `json:"relationship" xml:"relationship,attr"`

	// Type specifies the type of restriction.
	Type *MediaRestrictionType `json:"type,omitempty" xml:"sharing,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaRestrictionRelationship indicates the type of relationship that the restriction represents.
type MediaRestrictionRelationship string

// MediaRestrictionType specifies the type of restriction.
type MediaRestrictionType string

// MediaRights specifies the rights information of a media object.
type MediaRights struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Status is the status of the media object saying whether a media object has been created by the publisher or they have rights to circulate it.
	Status MediaRightsStatus `json:"status" validate:"omitempty,oneof=userCreated official" xml:"status,attr"`
}

// MediaRightsStatus is the status of the media object saying whether a media object has been created by the publisher or they have rights to circulate it.
type MediaRightsStatus string

// MediaScene contains information about a particular scene.
type MediaScene struct {
	SceneDescription *SceneDescription `json:"sceneDescription,omitempty" xml:"sceneDescription,omitempty"`
	SceneEndTime     *SceneEndTime     `json:"sceneEndTime,omitempty" xml:"sceneEndTime,omitempty"`
	SceneStartTime   *SceneStartTime   `json:"sceneStartTime,omitempty" xml:"sceneStartTime,omitempty"`
	SceneTitle       *SceneTitle       `json:"sceneTitle,omitempty" xml:"sceneTitle,omitempty"`
}

// MediaScenes specifies various scenes within a media object.
type MediaScenes = []MediaScene

// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
type MediaStatus struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Reason is a reason explaining why a media object has been blocked/deleted.
	Reason string `json:"reason" xml:"reason,attr"`

	// State indicates the status.
	State MediaStatusState `json:"state" validate:"omitempty,oneof=active blocked deleted" xml:"state,attr"`
}

// MediaStatusState indicates the status.
type MediaStatusState string

// MediaSubTitle contains subtitle/CC link.
type MediaSubTitle struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Href should specify the direct URL to the media object.
	Href *Href `json:"href,omitempty" validate:"omitempty,url" xml:"href,attr,omitempty"`

	// Lang is the primary language encapsulated in the media object. Language codes possible are detailed in RFC 3066.
	Lang Lang `json:"lang" validate:"omitempty,bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type TextType `json:"type" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`
}

// MediaText allows the inclusion of a text transcript, closed captioning or lyrics of the media content.
type MediaText struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// End specifies the end time offset that the text ends being relevant to the media object. An example of this would be for closed captioning. It uses the NTP time code format.
	End *string `json:"end,omitempty" xml:"end,attr,omitempty"`

	// Lang is the primary language encapsulated in the media object. Language codes possible are detailed in RFC 3066.
	Lang *Lang `json:"lang,omitempty" validate:"omitempty,bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Start specifies the start time offset that the text starts being relevant to the media object. An example of this would be for closed captioning. It uses the NTP time code format.
	Start *string `json:"start,omitempty" xml:"start,attr,omitempty"`

	// Type specifies the type of text embedded in the element.
	Type *TextType `json:"type,omitempty" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// MediaTexts a list of texts for the object.
type MediaTexts = []MediaText

// MediaThumbnail allows a particular images to be used as a representative image for the media object.
type MediaThumbnail struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Height is the height of the media object.
	Height *Height `json:"height,omitempty" validate:"omitempty,number" xml:"height,attr,omitempty"`

	// Time specifies the time offset in relation to the media object. Typically this is used when creating multiple keyframes within a single video. The format for this attribute should be in the DSM-CC's Normal Play Time (NTP) as used in RTSP
	Time *string `json:"time,omitempty" xml:"time,attr,omitempty"`
	URL  URL     `json:"url" validate:"required,url" xml:"url,attr"`

	// Width is the height of the media object.
	Width *Width `json:"width,omitempty" validate:"omitempty,number" xml:"width,attr,omitempty"`
}

// MediaThumbnails a list of thumbnails for the object.
type MediaThumbnails = []MediaThumbnail

// MediaTitle is the title of the particular media object.
type MediaTitle struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef0.XMLName `json:"xml" validate:"required"`

	// Type specifies the type of text embedded in the element.
	Type *TextType `json:"type,omitempty" validate:"omitempty,oneof=plain html" xml:"type,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// Medium is the type of object.
type Medium string

// MimeType is the standard MIME type of the object.
type MimeType = string

// Samplerate is the number of samples per second taken to create the media object. It is expressed in thousands of samples per second (kHz).
type Samplerate = int

// SceneDescription defines model for SceneDescription.
type SceneDescription struct {
	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// SceneEndTime defines model for SceneEndTime.
type SceneEndTime struct {
	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// SceneStartTime defines model for SceneStartTime.
type SceneStartTime struct {
	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// SceneTitle defines model for SceneTitle.
type SceneTitle struct {
	// Value is an element value that is required.
	Value externalRef0.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// Scheme is the URI that identifies the scheme used by the element.
type Scheme = string

// TextType specifies the type of text embedded in the element.
type TextType string

// URL should specify the direct URL to the media object.
type URL = string

// Width is the height of the media object.
type Width = int
