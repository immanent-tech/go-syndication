// Package atom provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package atom

import (
	externalRef0 "github.com/immanent-tech/go-syndication/extensions/dc"
	externalRef1 "github.com/immanent-tech/go-syndication/extensions/media"
	"github.com/immanent-tech/go-syndication/types"
	externalRef2 "github.com/immanent-tech/go-syndication/types"
	"github.com/nbio/xml"
)

// Defines values for LinkRel.
const (
	LinkRelAlternate                     LinkRel = "alternate"
	LinkRelEdit                          LinkRel = "edit"
	LinkRelEnclosure                     LinkRel = "enclosure"
	LinkRelHttpschemasGoogleComg2005Feed LinkRel = "http://schemas.google.com/g/2005#feed"
	LinkRelHub                           LinkRel = "hub"
	LinkRelNext                          LinkRel = "next"
	LinkRelRelated                       LinkRel = "related"
	LinkRelSelf                          LinkRel = "self"
	LinkRelVia                           LinkRel = "via"
)

// Authors a list of persons who maintain authorship of the feed.
type Authors = []PersonConstruct

// Categories a list of categories associated with the feed.
type Categories = []Category

// Category defines model for Category.
type Category struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Label provides a human-readable label for display in end-user applications.
	Label xml.Attr `json:"label,omitempty" xml:"label,attr,omitempty"`

	// Scheme is an IRI that identifies a categorization scheme.
	Scheme xml.Attr `json:"scheme,omitempty" xml:"scheme,attr,omitempty"`

	// Term is a string that identifies the category to which the entry or feed belongs.
	Term xml.Attr `json:"term" validate:"required" xml:"term,attr"`

	// Value is an element value that is optional.
	Value externalRef2.OptionalValue `json:"value,omitempty,omitzero" xml:",chardata"`
}

// CommonAttributes are common attributes across Atom elements.
type CommonAttributes struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
}

// Content defines model for Content.
type Content struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Source is an attribute that links to the source content.
	Source string `json:"src,omitempty" validate:"omitempty,uri" xml:"src,attr,omitempty"`

	// Type represents what the content of the element is.
	Type  Type   `json:"type,omitempty" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`
	Value string `json:"value,omitempty" xml:",chardata"`
}

// Contributors a list of persons who contributed to the feed.
type Contributors = []PersonConstruct

// DateConstruct defines model for DateConstruct.
type DateConstruct struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
	Value      types.DateTime          `json:"value" validate:"required" xml:",chardata"`
}

// Email is an element that conveys an email address.
type Email struct {
	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`
	Value   string  `json:"value" validate:"omitempty,email" xml:",chardata"`
}

// Entry defines model for Entry.
type Entry struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// DCContributor is an entity responsible for making contributions to the resource.
	DCContributor *externalRef0.DCContributor `json:"dc_contributor,omitempty" xml:"http://purl.org/dc/elements/1.1/ contributor,omitempty"`

	// DCCoverage is the spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.
	DCCoverage *externalRef0.DCCoverage `json:"dc_coverage,omitempty" xml:"http://purl.org/dc/elements/1.1/ coverage,omitempty"`

	// DCCreator is an entity primarily responsible for making the resource.
	DCCreator *externalRef0.DCCreator `json:"dc_creator,omitempty" xml:"http://purl.org/dc/elements/1.1/ creator,omitempty"`

	// DCDate is a point or period of time associated with an event in the lifecycle of the resource.
	DCDate *externalRef0.DCDate `json:"dc_date,omitempty" xml:"http://purl.org/dc/elements/1.1/ date,omitempty"`

	// DCDescription may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content.
	DCDescription *externalRef0.DCDescription `json:"dc_description,omitempty" xml:"http://purl.org/dc/elements/1.1/ description,omitempty"`

	// DCFormat is the file format, physical medium, or dimensions of the resource.
	DCFormat *externalRef0.DCFormat `json:"dc_format,omitempty" xml:"http://purl.org/dc/elements/1.1/ format,omitempty"`

	// DCIdentifier is an unambiguous reference to the resource within a given context.
	DCIdentifier *externalRef0.DCIdentifier `json:"dc_identifier,omitempty" xml:"http://purl.org/dc/elements/1.1/ identifier,omitempty"`

	// DCLanguage identifies the language used by the related resource using an HTML language code.
	DCLanguage externalRef0.DCLanguage `json:"dc_language,omitempty" validate:"omitempty,bcp47_language_tag" xml:"http://purl.org/dc/elements/1.1/ language,omitempty"`

	// DCPublisher is an entity responsible for making the resource available.
	DCPublisher *externalRef0.DCPublisher `json:"dc_publisher,omitempty" xml:"http://purl.org/dc/elements/1.1/ publisher,omitempty"`

	// DCRelation is a related resource.
	DCRelation *externalRef0.DCRelation `json:"dc_relation,omitempty" xml:"http://purl.org/dc/elements/1.1/ relation,omitempty"`

	// DCRights is information about rights held in and over the resource.
	DCRights *externalRef0.DCRights `json:"dc_rights,omitempty" xml:"http://purl.org/dc/elements/1.1/ rights,omitempty"`

	// DCSource is a related resource from which the described resource is derived.
	DCSource *externalRef0.DCSource `json:"dc_source,omitempty" xml:"http://purl.org/dc/elements/1.1/ source,omitempty"`

	// DCSubject is the topic of the resource.
	DCSubject *externalRef0.DCSubject `json:"dc_subject,omitempty" xml:"http://purl.org/dc/elements/1.1/ subject,omitempty"`

	// DCTitle is a name by which the resource is formally known.
	DCTitle *externalRef0.DCTitle `json:"dc_title,omitempty" xml:"http://purl.org/dc/elements/1.1/ title,omitempty"`

	// DCType is the nature or genre of the resource.
	DCType *externalRef0.DCType `json:"dc_type,omitempty" xml:"http://purl.org/dc/elements/1.1/ type,omitempty"`

	// ID is an element that conveys a permanent, universally unique identifier for an entry or feed.
	ID ID `json:"id" validate:"required" xml:"id"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks externalRef1.MediaBacklinks `json:"media_backlinks,omitempty" xml:"https://search.yahoo.com/mrss/ media:backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *externalRef1.MediaCategory `json:"media_category" xml:"https://search.yahoo.com/mrss/ media:category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments externalRef1.MediaComments `json:"MediaComments,omitempty,omitzero"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *externalRef1.MediaCommunity `json:"media_community" xml:"https://search.yahoo.com/mrss/ media:community,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *externalRef1.MediaCopyright `json:"media_copyright" xml:"https://search.yahoo.com/mrss/ media:copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits externalRef1.MediaCredits `json:"media_credits" xml:"credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *externalRef1.MediaDescription `json:"media_description" xml:"https://search.yahoo.com/mrss/ media:description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *externalRef1.MediaEmbed `json:"media_embed" xml:"https://search.yahoo.com/mrss/ media:embed,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes externalRef1.MediaHashes `json:"media_hashes" xml:"hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *externalRef1.MediaKeywords `json:"media_keywords" xml:"https://search.yahoo.com/mrss/ media:keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *externalRef1.MediaLicense `json:"media_license" xml:"https://search.yahoo.com/mrss/ media:license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *externalRef1.MediaPeerLink `json:"media_peerlink" xml:"https://search.yahoo.com/mrss/ media:peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *externalRef1.MediaPlayer `json:"media_player" xml:"https://search.yahoo.com/mrss/ media:player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *externalRef1.MediaPrice `json:"media_price" xml:"https://search.yahoo.com/mrss/ media:price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *externalRef1.MediaRating `json:"media_rating" xml:"https://search.yahoo.com/mrss/ media:rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses externalRef1.MediaResponses `json:"media_responses" xml:"https://search.yahoo.com/mrss/ media:response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *externalRef1.MediaRestriction `json:"media_restriction" xml:"https://search.yahoo.com/mrss/ media:restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *externalRef1.MediaRights `json:"media_rights" xml:"https://search.yahoo.com/mrss/ media:rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes externalRef1.MediaScenes `json:"media_scenes" xml:"https://search.yahoo.com/mrss/ media:scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *externalRef1.MediaStatus `json:"media_status" xml:"https://search.yahoo.com/mrss/ media:status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *externalRef1.MediaSubTitle `json:"media_subtitle,omitempty" xml:"https://search.yahoo.com/mrss/ media:subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts externalRef1.MediaTexts `json:"media_texts" xml:"text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails externalRef1.MediaThumbnails `json:"media_thumbnails" xml:"thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *externalRef1.MediaTitle `json:"media_title" xml:"https://search.yahoo.com/mrss/ media:title,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Authors a list of persons who maintain authorship of the feed.
	Authors Authors `json:"authors,omitempty,omitzero" validate:"omitempty,gt=0,dive" xml:"author,omitempty"`

	// Categories a list of categories associated with the feed.
	Categories Categories `json:"categories,omitempty,omitzero" validate:"dive" xml:"category,omitempty"`

	// Content either contains or links to the content of the entry.
	Content Content `json:"content,omitempty" xml:"content,omitempty"`

	// Contributors a list of persons who contributed to the feed.
	Contributors Contributors `json:"contributors,omitempty,omitzero" validate:"omitempty,gt=0,dive" xml:"contributor,omitempty"`

	// Extensions records any elements that are unknown extensions to the schema.
	Extensions externalRef2.Extensions `json:"extensions,omitempty" xml:",any"`

	// Links a list of links associated with the feed.
	Links Links `json:"links,omitempty,omitzero" validate:"dive" xml:"link,omitempty"`

	// Published is an element of type Date construct indicating an instant in time associated with an event early in the life cycle of the entry.
	Published Published `json:"published,omitempty" xml:"published,omitempty"`

	// Rights is an element of type Text construct that conveys information about rights held in and over an entry or feed.
	Rights Rights `json:"rights,omitempty" xml:"rights,omitempty"`

	// Source contains the metadata from the source feed for the entry.
	Source Source `json:"source,omitempty" validate:"omitempty" xml:"source,omitempty"`

	// Summary is an element of type Text construct that conveys a short summary, abstract, or excerpt of an entry.
	Summary Summary `json:"summary,omitempty" xml:"summary,omitempty"`

	// Title is an element of type Text construct that conveys a human-readable title for an entry or feed.
	Title Title `json:"title" validate:"required" xml:"title"`

	// Updated is an element of type Date construct indicating the most recent instant in time when an entry or feed was modified in a way the publisher considers significant.
	Updated Updated `json:"updated" validate:"required" xml:"updated"`
}

// Feed defines model for Feed.
type Feed struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// DCContributor is an entity responsible for making contributions to the resource.
	DCContributor *externalRef0.DCContributor `json:"dc_contributor,omitempty" xml:"http://purl.org/dc/elements/1.1/ contributor,omitempty"`

	// DCCoverage is the spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.
	DCCoverage *externalRef0.DCCoverage `json:"dc_coverage,omitempty" xml:"http://purl.org/dc/elements/1.1/ coverage,omitempty"`

	// DCCreator is an entity primarily responsible for making the resource.
	DCCreator *externalRef0.DCCreator `json:"dc_creator,omitempty" xml:"http://purl.org/dc/elements/1.1/ creator,omitempty"`

	// DCDate is a point or period of time associated with an event in the lifecycle of the resource.
	DCDate *externalRef0.DCDate `json:"dc_date,omitempty" xml:"http://purl.org/dc/elements/1.1/ date,omitempty"`

	// DCDescription may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content.
	DCDescription *externalRef0.DCDescription `json:"dc_description,omitempty" xml:"http://purl.org/dc/elements/1.1/ description,omitempty"`

	// DCFormat is the file format, physical medium, or dimensions of the resource.
	DCFormat *externalRef0.DCFormat `json:"dc_format,omitempty" xml:"http://purl.org/dc/elements/1.1/ format,omitempty"`

	// DCIdentifier is an unambiguous reference to the resource within a given context.
	DCIdentifier *externalRef0.DCIdentifier `json:"dc_identifier,omitempty" xml:"http://purl.org/dc/elements/1.1/ identifier,omitempty"`

	// DCLanguage identifies the language used by the related resource using an HTML language code.
	DCLanguage externalRef0.DCLanguage `json:"dc_language,omitempty" validate:"omitempty,bcp47_language_tag" xml:"http://purl.org/dc/elements/1.1/ language,omitempty"`

	// DCPublisher is an entity responsible for making the resource available.
	DCPublisher *externalRef0.DCPublisher `json:"dc_publisher,omitempty" xml:"http://purl.org/dc/elements/1.1/ publisher,omitempty"`

	// DCRelation is a related resource.
	DCRelation *externalRef0.DCRelation `json:"dc_relation,omitempty" xml:"http://purl.org/dc/elements/1.1/ relation,omitempty"`

	// DCRights is information about rights held in and over the resource.
	DCRights *externalRef0.DCRights `json:"dc_rights,omitempty" xml:"http://purl.org/dc/elements/1.1/ rights,omitempty"`

	// DCSource is a related resource from which the described resource is derived.
	DCSource *externalRef0.DCSource `json:"dc_source,omitempty" xml:"http://purl.org/dc/elements/1.1/ source,omitempty"`

	// DCSubject is the topic of the resource.
	DCSubject *externalRef0.DCSubject `json:"dc_subject,omitempty" xml:"http://purl.org/dc/elements/1.1/ subject,omitempty"`

	// DCTitle is a name by which the resource is formally known.
	DCTitle *externalRef0.DCTitle `json:"dc_title,omitempty" xml:"http://purl.org/dc/elements/1.1/ title,omitempty"`

	// DCType is the nature or genre of the resource.
	DCType *externalRef0.DCType `json:"dc_type,omitempty" xml:"http://purl.org/dc/elements/1.1/ type,omitempty"`

	// ID is an element that conveys a permanent, universally unique identifier for an entry or feed.
	ID ID `json:"id" validate:"required" xml:"id"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks externalRef1.MediaBacklinks `json:"media_backlinks,omitempty" xml:"https://search.yahoo.com/mrss/ media:backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *externalRef1.MediaCategory `json:"media_category" xml:"https://search.yahoo.com/mrss/ media:category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments externalRef1.MediaComments `json:"MediaComments,omitempty,omitzero"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *externalRef1.MediaCommunity `json:"media_community" xml:"https://search.yahoo.com/mrss/ media:community,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *externalRef1.MediaCopyright `json:"media_copyright" xml:"https://search.yahoo.com/mrss/ media:copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits externalRef1.MediaCredits `json:"media_credits" xml:"credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *externalRef1.MediaDescription `json:"media_description" xml:"https://search.yahoo.com/mrss/ media:description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *externalRef1.MediaEmbed `json:"media_embed" xml:"https://search.yahoo.com/mrss/ media:embed,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes externalRef1.MediaHashes `json:"media_hashes" xml:"hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *externalRef1.MediaKeywords `json:"media_keywords" xml:"https://search.yahoo.com/mrss/ media:keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *externalRef1.MediaLicense `json:"media_license" xml:"https://search.yahoo.com/mrss/ media:license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *externalRef1.MediaPeerLink `json:"media_peerlink" xml:"https://search.yahoo.com/mrss/ media:peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *externalRef1.MediaPlayer `json:"media_player" xml:"https://search.yahoo.com/mrss/ media:player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *externalRef1.MediaPrice `json:"media_price" xml:"https://search.yahoo.com/mrss/ media:price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *externalRef1.MediaRating `json:"media_rating" xml:"https://search.yahoo.com/mrss/ media:rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses externalRef1.MediaResponses `json:"media_responses" xml:"https://search.yahoo.com/mrss/ media:response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *externalRef1.MediaRestriction `json:"media_restriction" xml:"https://search.yahoo.com/mrss/ media:restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *externalRef1.MediaRights `json:"media_rights" xml:"https://search.yahoo.com/mrss/ media:rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes externalRef1.MediaScenes `json:"media_scenes" xml:"https://search.yahoo.com/mrss/ media:scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *externalRef1.MediaStatus `json:"media_status" xml:"https://search.yahoo.com/mrss/ media:status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *externalRef1.MediaSubTitle `json:"media_subtitle,omitempty" xml:"https://search.yahoo.com/mrss/ media:subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts externalRef1.MediaTexts `json:"media_texts" xml:"text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails externalRef1.MediaThumbnails `json:"media_thumbnails" xml:"thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *externalRef1.MediaTitle `json:"media_title" xml:"https://search.yahoo.com/mrss/ media:title,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Authors a list of persons who maintain authorship of the feed.
	Authors Authors `json:"authors,omitempty,omitzero" validate:"omitempty,gt=0,dive" xml:"author,omitempty"`

	// Categories a list of categories associated with the feed.
	Categories Categories `json:"categories,omitempty,omitzero" validate:"dive" xml:"category,omitempty"`

	// Contributors a list of persons who contributed to the feed.
	Contributors Contributors `json:"contributors,omitempty,omitzero" validate:"omitempty,gt=0,dive" xml:"contributor,omitempty"`

	// Entries is the list of <entry> elements for the feed.
	Entries []Entry `json:"entry,omitempty" validate:"dive" xml:"entry,omitempty"`

	// Generator is an element identifies the agent used to generate a feed.
	Generator Generator `json:"generator,omitempty" xml:"generator,omitempty"`

	// Links a list of links associated with the feed.
	Links Links `json:"links,omitempty,omitzero" validate:"dive" xml:"link,omitempty"`

	// Logo is an element that contains a URI to an logo suitable for representing a feed.
	Logo Logo `json:"logo,omitempty" validate:"omitempty" xml:"logo,omitempty"`

	// Rights is an element of type Text construct that conveys information about rights held in and over an entry or feed.
	Rights Rights `json:"rights,omitempty" xml:"rights,omitempty"`

	// Subtitle is an element of type Text construct that conveys a human-readable subtitle for an entry or feed.
	Subtitle Subtitle `json:"subtitle,omitempty" xml:"subtitle,omitempty"`

	// Title is an element of type Text construct that conveys a human-readable title for an entry or feed.
	Title Title `json:"title" validate:"required" xml:"title"`

	// Updated is an element of type Date construct indicating the most recent instant in time when an entry or feed was modified in a way the publisher considers significant.
	Updated Updated `json:"updated" validate:"required" xml:"updated"`
}

// FeedMetadata defines model for FeedMetadata.
type FeedMetadata struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// ID is an element that conveys a permanent, universally unique identifier for an entry or feed.
	ID ID `json:"id" validate:"required" xml:"id"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Authors a list of persons who maintain authorship of the feed.
	Authors Authors `json:"authors,omitempty,omitzero" validate:"omitempty,gt=0,dive" xml:"author,omitempty"`

	// Categories a list of categories associated with the feed.
	Categories Categories `json:"categories,omitempty,omitzero" validate:"dive" xml:"category,omitempty"`

	// Contributors a list of persons who contributed to the feed.
	Contributors Contributors `json:"contributors,omitempty,omitzero" validate:"omitempty,gt=0,dive" xml:"contributor,omitempty"`

	// Generator is an element identifies the agent used to generate a feed.
	Generator Generator `json:"generator,omitempty" xml:"generator,omitempty"`

	// Links a list of links associated with the feed.
	Links Links `json:"links,omitempty,omitzero" validate:"dive" xml:"link,omitempty"`

	// Logo is an element that contains a URI to an logo suitable for representing a feed.
	Logo Logo `json:"logo,omitempty" validate:"omitempty" xml:"logo,omitempty"`

	// Rights is an element of type Text construct that conveys information about rights held in and over an entry or feed.
	Rights Rights `json:"rights,omitempty" xml:"rights,omitempty"`

	// Subtitle is an element of type Text construct that conveys a human-readable subtitle for an entry or feed.
	Subtitle Subtitle `json:"subtitle,omitempty" xml:"subtitle,omitempty"`

	// Title is an element of type Text construct that conveys a human-readable title for an entry or feed.
	Title Title `json:"title" validate:"required" xml:"title"`

	// Updated is an element of type Date construct indicating the most recent instant in time when an entry or feed was modified in a way the publisher considers significant.
	Updated Updated `json:"updated" validate:"required" xml:"updated"`
}

// Generator defines model for Generator.
type Generator struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
	URI        string                  `json:"uri,omitempty" validate:"omitempty,url" xml:"uri,attr,omitempty"`

	// Value is an element value that is optional.
	Value   externalRef2.OptionalValue `json:"value,omitempty,omitzero" xml:",chardata"`
	Version string                     `json:"version,omitempty" xml:"version,attr,omitempty"`
}

// ID defines model for ID.
type ID struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Value is the value of the ID
	Value string `json:"value" validate:"required,uri|urn_rfc2141" xml:",chardata"`
}

// Icon defines model for Icon.
type Icon struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
	Value      string                  `json:"value" validate:"required,uri|urn_rfc2141|uuid" xml:",chardata"`
}

// Link defines model for Link.
type Link struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Href contains the URL of the related resource.
	Href string `json:"href" validate:"required,url" xml:"href,attr"`

	// HrefLang identifies the language used by the related resource using an HTML language code.
	HrefLang string `json:"hreflang,omitempty,omitzero" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"hreflang,attr,omitempty"`

	// Length contains the resource's size, in bytes.
	Length int `json:"length,omitempty,omitzero" validate:"omitempty,number" xml:"length,attr,omitempty"`

	// Rel contains a keyword that identifies the nature of the relationship between the linked resouce and the element.
	Rel LinkRel `json:"rel,omitempty,omitzero" validate:"omitempty,oneof=alternate enclosure related self via hub edit next http://schemas.google.com/g/2005#feed" xml:"rel,attr,omitempty"`

	// Title provides a human-readable description of the resource.
	Title string `json:"title,omitempty,omitzero" xml:"title,attr,omitempty"`

	// Type identifies the resource's MIME media type.
	Type string `json:"type,omitempty,omitzero" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`

	// Value is any value for the link.
	Value string `json:"value" validate:"omitempty,uri|urn_rfc2141|uuid" xml:",chardata"`
}

// LinkRel contains a keyword that identifies the nature of the relationship between the linked resouce and the element.
type LinkRel string

// Links a list of links associated with the feed.
type Links = []Link

// Logo defines model for Logo.
type Logo struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
	Value      string                  `json:"value" validate:"required,uri|urn_rfc2141|uuid" xml:",chardata"`
}

// Name is an element that conveys a human-readable name.
type Name struct {
	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`
	Value   string  `json:"value" validate:"required" xml:",chardata"`
}

// PersonConstruct defines model for PersonConstruct.
type PersonConstruct struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Email is an element that conveys an email address.
	Email Email `json:"email,omitempty" xml:"email,omitempty"`

	// Extensions records any elements that are unknown extensions to the schema.
	Extensions externalRef2.Extensions `json:"extensions,omitempty" xml:",any"`
	Name       Name                    `json:"name" validate:"required" xml:"name"`

	// URI is an element that conveys an IRI (URI).
	URI URI `json:"uri,omitempty" validate:"omitempty" xml:"uri,omitempty"`
}

// Published defines model for Published.
type Published struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
	Value      types.DateTime          `json:"value" validate:"required" xml:",chardata"`
}

// Rights defines model for Rights.
type Rights struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Type represents what the content of the element is.
	Type Type `json:"type,omitempty" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`

	// Value is the actual text value of the construct.
	Value string `json:"value" xml:",chardata"`
}

// Source is the feed metadata.
type Source = FeedMetadata

// Subtitle defines model for Subtitle.
type Subtitle struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Type represents what the content of the element is.
	Type Type `json:"type,omitempty" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`

	// Value is the actual text value of the construct.
	Value string `json:"value" xml:",chardata"`
}

// Summary defines model for Summary.
type Summary struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Type represents what the content of the element is.
	Type Type `json:"type,omitempty" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`

	// Value is the actual text value of the construct.
	Value string `json:"value" xml:",chardata"`
}

// TextConstruct defines model for TextConstruct.
type TextConstruct struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Type represents what the content of the element is.
	Type Type `json:"type,omitempty" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`

	// Value is the actual text value of the construct.
	Value string `json:"value" xml:",chardata"`
}

// Title defines model for Title.
type Title struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`

	// Type represents what the content of the element is.
	Type Type `json:"type,omitempty" validate:"omitempty,mimetype" xml:"type,attr,omitempty"`

	// Value is the actual text value of the construct.
	Value string `json:"value" xml:",chardata"`
}

// Type represents what the content of the element is.
type Type = string

// URI is an element that conveys an IRI (URI).
type URI struct {
	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`
	Value   string  `json:"value" validate:"required,uri|urn_rfc2141|uuid" xml:",chardata"`
}

// Updated defines model for Updated.
type Updated struct {
	// Base establishes the base URI (or IRI) for resolving any relative references found within the effective scope of the xml:base attribute.
	Base string `json:"base,omitempty" validate:"omitempty" xml:"base,attr,omitempty"`

	// Lang indicates the natural language for the element and its descendents.
	Lang string `json:"lang,omitempty" validate:"omitempty,iso3166_1_alpha2|iso3166_1_alpha3|bcp47_language_tag" xml:"lang,attr,omitempty"`

	// XMLName represents the XML namespace of an element.
	XMLName XMLName `json:"xml" validate:"required"`

	// Attributes are any attributes of the element.
	Attributes externalRef2.Attributes `json:"attributes" xml:",any,attr"`
	Value      types.DateTime          `json:"value" validate:"required" xml:",chardata"`
}

// XMLName represents the XML namespace of an element.
type XMLName = xml.Name
