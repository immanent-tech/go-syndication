// Package rss provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rss

import (
	"encoding/xml"

	externalRef0 "github.com/joshuar/go-syndication/atom"
	externalRef1 "github.com/joshuar/go-syndication/dc"
	externalRef2 "github.com/joshuar/go-syndication/mrss"
	"github.com/joshuar/go-syndication/types"
	externalRef3 "github.com/joshuar/go-syndication/types"
)

// Defines values for CloudProtocol.
const (
	HttpPost CloudProtocol = "http-post"
	Soap     CloudProtocol = "soap"
	XmlRpc   CloudProtocol = "xml-rpc"
)

// Defines values for SkipDaysDay.
const (
	SkipFriday    SkipDaysDay = "Friday"
	SkipMonday    SkipDaysDay = "Monday"
	SkipSaturday  SkipDaysDay = "Saturday"
	SkipSunday    SkipDaysDay = "Sunday"
	SkipThursday  SkipDaysDay = "Thursday"
	SkipTuesday   SkipDaysDay = "Tuesday"
	SkipWednesday SkipDaysDay = "Wednesday"
)

// Author is the email address of the author of the item. For newspapers and magazines syndicating via RSS, the author is the person who wrote the article that the <item> describes. For collaborative weblogs, the author of the item might be different from the managing editor or webmaster. For a weblog authored by a single individual it would make sense to omit the <author> element.
type Author = string

// Category allows a taxonomy to be set on the channel or item.
type Category struct {
	// Domain is a string that identifies a categorization taxonomy.
	Domain *string `json:"domain,omitempty" xml:"domain,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef3.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// Channel defines model for Channel.
type Channel struct {
	AtomLink *externalRef0.Link `json:"AtomLink,omitempty" xml:"http://www.w3.org/2005/Atom link,omitempty"`

	// DCContributor is an entity responsible for making contributions to the resource.
	DCContributor *externalRef1.DCContributor `json:"dc_contributor,omitempty" xml:"http://purl.org/dc/elements/1.1/ contributor,omitempty"`

	// DCCoverage is the spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.
	DCCoverage *externalRef1.DCCoverage `json:"dc_coverage,omitempty" xml:"http://purl.org/dc/elements/1.1/ coverage,omitempty"`

	// DCCreator is an entity primarily responsible for making the resource.
	DCCreator *externalRef1.DCCreator `json:"dc_creator,omitempty" xml:"http://purl.org/dc/elements/1.1/ creator,omitempty"`

	// DCDate is a point or period of time associated with an event in the lifecycle of the resource.
	DCDate *externalRef1.DCDate `json:"dc_date,omitempty" xml:"http://purl.org/dc/elements/1.1/ date,omitempty"`

	// DCDescription may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content.
	DCDescription *externalRef1.DCDescription `json:"dc_description,omitempty" xml:"http://purl.org/dc/elements/1.1/ description,omitempty"`

	// DCFormat is the file format, physical medium, or dimensions of the resource.
	DCFormat *externalRef1.DCFormat `json:"dc_format,omitempty" xml:"http://purl.org/dc/elements/1.1/ format,omitempty"`

	// DCIdentifier is an unambiguous reference to the resource within a given context.
	DCIdentifier *externalRef1.DCIdentifier `json:"dc_identifier,omitempty" xml:"http://purl.org/dc/elements/1.1/ identifier,omitempty"`

	// DCLanguage identifies the language used by the related resource using an HTML language code.
	DCLanguage *externalRef1.DCLanguage `json:"dc_language,omitempty" xml:"http://purl.org/dc/elements/1.1/ language,omitempty"`

	// DCPublisher is an entity responsible for making the resource available.
	DCPublisher *externalRef1.DCPublisher `json:"dc_publisher,omitempty" xml:"http://purl.org/dc/elements/1.1/ publisher,omitempty"`

	// DCRelation is a related resource.
	DCRelation *externalRef1.DCRelation `json:"dc_relation,omitempty" xml:"http://purl.org/dc/elements/1.1/ relation,omitempty"`

	// DCRights is information about rights held in and over the resource.
	DCRights *externalRef1.DCRights `json:"dc_rights,omitempty" xml:"http://purl.org/dc/elements/1.1/ rights,omitempty"`

	// DCSource is a related resource from which the described resource is derived.
	DCSource *externalRef1.DCSource `json:"dc_source,omitempty" xml:"http://purl.org/dc/elements/1.1/ source,omitempty"`

	// DCSubject is the topic of the resource.
	DCSubject *externalRef1.DCSubject `json:"dc_subject,omitempty" xml:"http://purl.org/dc/elements/1.1/ subject,omitempty"`

	// DCTitle is a name by which the resource is formally known.
	DCTitle *externalRef1.DCTitle `json:"dc_title,omitempty" xml:"http://purl.org/dc/elements/1.1/ title,omitempty"`

	// DCType is the nature or genre of the resource.
	DCType *externalRef1.DCType `json:"dc_type,omitempty" xml:"http://purl.org/dc/elements/1.1/ type,omitempty"`

	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks externalRef2.MediaBacklinks `json:"backLinks,omitempty" xml:"http://search.yahoo.com/mrss/ backLinks>backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *externalRef2.MediaCategory `json:"MediaCategory,omitempty" xml:"http://search.yahoo.com/mrss/ category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments externalRef2.MediaComments `json:"MediaComments,omitempty" xml:"http://search.yahoo.com/mrss/ >comment,omitempty"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *externalRef2.MediaCommunity `json:"MediaCommunity,omitempty" xml:"http://search.yahoo.com/mrss/ community,omitempty"`

	// MediaContent can be used to publish any type of media.
	MediaContent *externalRef2.MediaContent `json:"media_content,omitempty" xml:"http://search.yahoo.com/mrss/ content,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *externalRef2.MediaCopyright `json:"MediaCopyright,omitempty" xml:"http://search.yahoo.com/mrss/ copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits externalRef2.MediaCredits `json:"MediaCredits,omitempty" xml:"http://search.yahoo.com/mrss/ credits>credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *externalRef2.MediaDescription `json:"MediaDescription,omitempty" xml:"http://search.yahoo.com/mrss/ description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *externalRef2.MediaEmbed `json:"MediaEmbed,omitempty" xml:"http://search.yahoo.com/mrss/ embed,omitempty"`

	// MediaGroup allows grouping of <media:content> elements that are effectively the same content, yet different representations. For instance: the same song recorded in both the WAV and MP3 format.
	MediaGroup *externalRef2.MediaGroup `json:"MediaGroup,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes externalRef2.MediaHashes `json:"MediaHashes,omitempty" xml:"http://search.yahoo.com/mrss/ hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *externalRef2.MediaKeywords `json:"MediaKeywords,omitempty" xml:"http://search.yahoo.com/mrss/ keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *externalRef2.MediaLicense `json:"MediaLicense,omitempty" xml:"http://search.yahoo.com/mrss/ license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *externalRef2.MediaPeerLink `json:"MediaPeerLink,omitempty" xml:"http://search.yahoo.com/mrss/ peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *externalRef2.MediaPlayer `json:"MediaPlayer,omitempty" xml:"http://search.yahoo.com/mrss/ player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *externalRef2.MediaPrice `json:"MediaPrice,omitempty" xml:"http://search.yahoo.com/mrss/ price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *externalRef2.MediaRating `json:"MediaRating,omitempty" xml:"http://search.yahoo.com/mrss/ rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses externalRef2.MediaResponses `json:"MediaResponses,omitempty" xml:"http://search.yahoo.com/mrss/ responses>response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *externalRef2.MediaRestriction `json:"MediaRestriction,omitempty" xml:"http://search.yahoo.com/mrss/ restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *externalRef2.MediaRights `json:"MediaRights,omitempty" xml:"http://search.yahoo.com/mrss/ rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes externalRef2.MediaScenes `json:"MediaScenes,omitempty" xml:"http://search.yahoo.com/mrss/ scenes>scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *externalRef2.MediaStatus `json:"MediaStatus,omitempty" xml:"http://search.yahoo.com/mrss/ status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *externalRef2.MediaSubTitle `json:"subTitle,omitempty" xml:"http://search.yahoo.com/mrss/ subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts externalRef2.MediaTexts `json:"MediaTexts,omitempty" xml:"http://search.yahoo.com/mrss/ texts>text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails externalRef2.MediaThumbnails `json:"MediaThumbnails,omitempty" xml:"http://search.yahoo.com/mrss/ thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *externalRef2.MediaTitle `json:"MediaTitle,omitempty" xml:"http://search.yahoo.com/mrss/ title,omitempty"`

	// SYUdatePeriod is the period over which the channel format is updated.
	SYUdatePeriod *SYUpdatePeriod `json:"sy_updatePeriod,omitempty" xml:"http://purl.org/rss/1.0/modules/syndication/ updatePeriod,omitempty"`

	// SYUpdateBase is a base date to be used in concert with updatePeriod and updateFrequency to calculate the publishing schedule.
	SYUpdateBase *SYUpdateBase `json:"sy_updateBase,omitempty" xml:"http://purl.org/rss/1.0/modules/syndication/ updateBase,omitempty"`

	// SYUpdateFrequency describes the frequency of updates in relation to the update period.
	SYUpdateFrequency *SYUpdateFrequency `json:"sy_updateFrequency,omitempty" xml:"http://purl.org/rss/1.0/modules/syndication/ updateFrequency,omitempty"`

	// Categories is a list of categories associated with the channel.
	Categories []Category `json:"category,omitempty" xml:"category,omitempty"`

	// Cloud specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1.
	// Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
	Cloud *Cloud `json:"cloud,omitempty" xml:"cloud,omitempty"`

	// Copyright Copyright notice for content in the channel.
	Copyright *Copyright `json:"copyright,omitempty" xml:"copyright,omitempty"`

	// Description the description of the channel.
	Description Description `json:"description" xml:"description"`

	// Docs A URL that points to the documentation for the format used in the RSS file. It's probably a pointer to this page. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is.
	Docs *Docs `json:"docs,omitempty" validate:"omitempty,uri" xml:"docs,omitempty"`

	// Extensions records any elements that are unknown extensions to the schema.
	Extensions externalRef3.Extensions `json:"extensions,omitempty" xml:",any"`

	// Generator is a string indicating the program used to generate the channel.
	Generator *Generator `json:"generator,omitempty" xml:"generator,omitempty"`

	// Image contains details of a GIF, JPEG or PNG image that can be displayed with the channel or item.
	Image *Image `json:"image,omitempty" xml:"image,omitempty"`

	// Items is a list of the current items published to the channel.
	Items []Item `json:"items,omitempty" xml:"item,omitempty"`

	// Language The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page.
	Language *Language `json:"language,omitempty" validate:"omitempty,bcp47_language_tag" xml:"language,omitempty"`

	// LastBuildDate is the last time the content of the channel changed.
	LastBuildDate *LastBuildDate             `json:"lastBuildDate,omitempty" validate:"omitempty" xml:"lastBuildDate,omitempty"`
	Link          externalRef3.OptionalValue `json:"link" xml:"link"`

	// ManagingEditor is the email address for person responsible for editorial content.
	ManagingEditor *ManagingEditor `json:"managingEditor,omitempty" xml:"managingEditor,omitempty"`

	// PubDate is the publication date of the content.
	PubDate *PubDate `json:"pubDate,omitempty" validate:"omitempty" xml:"pubDate,omitempty"`

	// Rating contains a rating for the element.
	Rating *Rating `json:"rating,omitempty" xml:"rating,omitempty"`

	// SkipDays is a hint for aggregators telling them which days they can skip. This
	SkipDays *SkipDays `json:"skipDays,omitempty" xml:"skipDays,omitempty"`

	// SkipHours is a hint for aggregators telling them which hours they can skip.
	SkipHours *SkipHours `json:"skipHours,omitempty" xml:"skipHours,omitempty"`

	// TextInput The purpose of the <textInput> element is something of a mystery. You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.
	TextInput *TextInput `json:"textInput,omitempty" xml:"textInput,omitempty"`

	// Title the title of the channel.
	Title Title `json:"title" xml:"title"`

	// TTL stands for time to live. It's a number of minutes that indicates how long a channel can be cached before refreshing from the source.
	TTL *TTL `json:"ttl,omitempty" validate:"omitempty,gte=1" xml:"ttl,omitempty"`

	// WebMaster is the email address for person responsible for technical issues relating to channel.
	WebMaster *WebMaster `json:"webMaster,omitempty" xml:"webMaster,omitempty"`
}

// ChannelElements contains all Channel elements (i.e., Channel metadata).
type ChannelElements struct {
	AtomLink *externalRef0.Link `json:"AtomLink,omitempty" xml:"http://www.w3.org/2005/Atom link,omitempty"`

	// Categories is a list of categories associated with the channel.
	Categories []Category `json:"category,omitempty" xml:"category,omitempty"`

	// Cloud specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1.
	// Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
	Cloud *Cloud `json:"cloud,omitempty" xml:"cloud,omitempty"`

	// Copyright Copyright notice for content in the channel.
	Copyright *Copyright `json:"copyright,omitempty" xml:"copyright,omitempty"`

	// Description the description of the channel.
	Description Description `json:"description" xml:"description"`

	// Docs A URL that points to the documentation for the format used in the RSS file. It's probably a pointer to this page. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is.
	Docs *Docs `json:"docs,omitempty" validate:"omitempty,uri" xml:"docs,omitempty"`

	// Generator is a string indicating the program used to generate the channel.
	Generator *Generator `json:"generator,omitempty" xml:"generator,omitempty"`

	// Image contains details of a GIF, JPEG or PNG image that can be displayed with the channel or item.
	Image *Image `json:"image,omitempty" xml:"image,omitempty"`

	// Language The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page.
	Language *Language `json:"language,omitempty" validate:"omitempty,bcp47_language_tag" xml:"language,omitempty"`

	// LastBuildDate is the last time the content of the channel changed.
	LastBuildDate *LastBuildDate             `json:"lastBuildDate,omitempty" validate:"omitempty" xml:"lastBuildDate,omitempty"`
	Link          externalRef3.OptionalValue `json:"link" xml:"link"`

	// ManagingEditor is the email address for person responsible for editorial content.
	ManagingEditor *ManagingEditor `json:"managingEditor,omitempty" xml:"managingEditor,omitempty"`

	// PubDate is the publication date of the content.
	PubDate *PubDate `json:"pubDate,omitempty" validate:"omitempty" xml:"pubDate,omitempty"`

	// Rating contains a rating for the element.
	Rating *Rating `json:"rating,omitempty" xml:"rating,omitempty"`

	// SkipDays is a hint for aggregators telling them which days they can skip. This
	SkipDays *SkipDays `json:"skipDays,omitempty" xml:"skipDays,omitempty"`

	// SkipHours is a hint for aggregators telling them which hours they can skip.
	SkipHours *SkipHours `json:"skipHours,omitempty" xml:"skipHours,omitempty"`

	// TextInput The purpose of the <textInput> element is something of a mystery. You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.
	TextInput *TextInput `json:"textInput,omitempty" xml:"textInput,omitempty"`

	// Title the title of the channel.
	Title Title `json:"title" xml:"title"`

	// TTL stands for time to live. It's a number of minutes that indicates how long a channel can be cached before refreshing from the source.
	TTL *TTL `json:"ttl,omitempty" validate:"omitempty,gte=1" xml:"ttl,omitempty"`

	// WebMaster is the email address for person responsible for technical issues relating to channel.
	WebMaster *WebMaster `json:"webMaster,omitempty" xml:"webMaster,omitempty"`
}

// Cloud specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1.
// Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
type Cloud struct {
	Domain            string        `json:"domain" validate:"required" xml:"domain,attr"`
	Path              string        `json:"path" validate:"required" xml:"path,attr"`
	Port              int           `json:"port" validate:"required" xml:"port,attr"`
	Protocol          CloudProtocol `json:"protocol" validate:"required" xml:"protocol,attr"`
	RegisterProcedure string        `json:"registerProcedure" validate:"required" xml:"registerProcedure,attr"`
}

// CloudProtocol defines model for Cloud.Protocol.
type CloudProtocol string

// Comments is the url of the comments page for the item.
type Comments = string

// Copyright Copyright notice for content in the channel.
type Copyright = string

// Description is the description of the channel or item.
type Description = string

// Docs A URL that points to the documentation for the format used in the RSS file. It's probably a pointer to this page. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is.
type Docs = string

// Enclosure describes a media object.
type Enclosure struct {
	// Length indicates how big the enclosure is in bytes.
	Length int `json:"length" validate:"required,number" xml:"length,attr"`

	// Type indicates the MIME type of the enclosure.
	Type string `json:"type" validate:"required" xml:"type,attr"`

	// URL indicates where the enclosure is located.
	URL string `json:"url" validate:"required,uri" xml:"url,attr"`
}

// GUID is a string that uniquely identifies an item.
type GUID struct {
	// IsPermaLink If true the guid is assumed to be a URL. If its value is false, the guid may not be assumed to be a url, or a url to anything in particular.
	IsPermaLink *bool `json:"isPermaLink,omitempty" xml:"isPermaLink,attr,omitempty"`

	// Value is an element value that is required.
	Value externalRef3.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// Generator is a string indicating the program used to generate the channel.
type Generator = string

// Image contains details of a GIF, JPEG or PNG image that can be displayed with the channel or item.
type Image struct {
	// Description contains text that is included in the TITLE attribute of the link formed around the image in the HTML rendering.
	Description *string `json:"description,omitempty" xml:"description,omitempty"`

	// Height indicates the height of the image in pixels.
	Height *int `json:"height,omitempty" validate:"omitempty,gt=0,lte=400" xml:"height,omitempty"`

	// Link is the URL of the site, when the channel is rendered, the image is a link to the site. (Note, in practice the image <title> and <link> should have the same value as the channel's <title> and <link>.
	Link string `json:"link" validate:"omitempty,uri" xml:"link"`

	// Title describes the image, it's used in the ALT attribute of the HTML <img> tag when the channel is rendered in HTML.
	Title string `json:"title" xml:"title"`

	// URL is the URL of a GIF, JPEG or PNG image that represents the channel.
	URL string `json:"url" validate:"omitempty,uri" xml:"url"`

	// Width indicates the width of the image in pixels.
	Width *int `json:"width,omitempty" validate:"omitempty,gt=0,lte=144" xml:"width,omitempty"`
}

// Item defines model for Item.
type Item struct {
	// ContentEncoded is an element whose contents are the entity-encoded or CDATA-escaped version of the content of the item.
	ContentEncoded *ContentEncoded `json:"content_encoded,omitempty" xml:"http://purl.org/rss/1.0/modules/content/ encoded,omitempty"`

	// DCContributor is an entity responsible for making contributions to the resource.
	DCContributor *externalRef1.DCContributor `json:"dc_contributor,omitempty" xml:"http://purl.org/dc/elements/1.1/ contributor,omitempty"`

	// DCCoverage is the spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.
	DCCoverage *externalRef1.DCCoverage `json:"dc_coverage,omitempty" xml:"http://purl.org/dc/elements/1.1/ coverage,omitempty"`

	// DCCreator is an entity primarily responsible for making the resource.
	DCCreator *externalRef1.DCCreator `json:"dc_creator,omitempty" xml:"http://purl.org/dc/elements/1.1/ creator,omitempty"`

	// DCDate is a point or period of time associated with an event in the lifecycle of the resource.
	DCDate *externalRef1.DCDate `json:"dc_date,omitempty" xml:"http://purl.org/dc/elements/1.1/ date,omitempty"`

	// DCDescription may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content.
	DCDescription *externalRef1.DCDescription `json:"dc_description,omitempty" xml:"http://purl.org/dc/elements/1.1/ description,omitempty"`

	// DCFormat is the file format, physical medium, or dimensions of the resource.
	DCFormat *externalRef1.DCFormat `json:"dc_format,omitempty" xml:"http://purl.org/dc/elements/1.1/ format,omitempty"`

	// DCIdentifier is an unambiguous reference to the resource within a given context.
	DCIdentifier *externalRef1.DCIdentifier `json:"dc_identifier,omitempty" xml:"http://purl.org/dc/elements/1.1/ identifier,omitempty"`

	// DCLanguage identifies the language used by the related resource using an HTML language code.
	DCLanguage *externalRef1.DCLanguage `json:"dc_language,omitempty" xml:"http://purl.org/dc/elements/1.1/ language,omitempty"`

	// DCPublisher is an entity responsible for making the resource available.
	DCPublisher *externalRef1.DCPublisher `json:"dc_publisher,omitempty" xml:"http://purl.org/dc/elements/1.1/ publisher,omitempty"`

	// DCRelation is a related resource.
	DCRelation *externalRef1.DCRelation `json:"dc_relation,omitempty" xml:"http://purl.org/dc/elements/1.1/ relation,omitempty"`

	// DCRights is information about rights held in and over the resource.
	DCRights *externalRef1.DCRights `json:"dc_rights,omitempty" xml:"http://purl.org/dc/elements/1.1/ rights,omitempty"`

	// DCSource is a related resource from which the described resource is derived.
	DCSource *externalRef1.DCSource `json:"dc_source,omitempty" xml:"http://purl.org/dc/elements/1.1/ source,omitempty"`

	// DCSubject is the topic of the resource.
	DCSubject *externalRef1.DCSubject `json:"dc_subject,omitempty" xml:"http://purl.org/dc/elements/1.1/ subject,omitempty"`

	// DCTitle is a name by which the resource is formally known.
	DCTitle *externalRef1.DCTitle `json:"dc_title,omitempty" xml:"http://purl.org/dc/elements/1.1/ title,omitempty"`

	// DCType is the nature or genre of the resource.
	DCType *externalRef1.DCType `json:"dc_type,omitempty" xml:"http://purl.org/dc/elements/1.1/ type,omitempty"`

	// MediaBackLinks allows inclusion of all the URLs pointing to a media object.
	MediaBackLinks externalRef2.MediaBacklinks `json:"backLinks,omitempty" xml:"http://search.yahoo.com/mrss/ backLinks>backLink,omitempty"`

	// MediaCategory allows a taxonomy to be set that gives an indication of the type of media content, and its particular contents.
	MediaCategory *externalRef2.MediaCategory `json:"MediaCategory,omitempty" xml:"http://search.yahoo.com/mrss/ category,omitempty"`

	// MediaComments is a list of comments the media object has received.
	MediaComments externalRef2.MediaComments `json:"MediaComments,omitempty" xml:"http://search.yahoo.com/mrss/ >comment,omitempty"`

	// MediaCommunity stands for the community related content. This allows inclusion of the user perception about a media object in the form of view count, ratings and tags.
	MediaCommunity *externalRef2.MediaCommunity `json:"MediaCommunity,omitempty" xml:"http://search.yahoo.com/mrss/ community,omitempty"`

	// MediaContent can be used to publish any type of media.
	MediaContent *externalRef2.MediaContent `json:"media_content,omitempty" xml:"http://search.yahoo.com/mrss/ content,omitempty"`

	// MediaCopyright is copyright information for the media object.
	MediaCopyright *externalRef2.MediaCopyright `json:"MediaCopyright,omitempty" xml:"http://search.yahoo.com/mrss/ copyright,omitempty"`

	// MediaCredits a list of credits for the object.
	MediaCredits externalRef2.MediaCredits `json:"MediaCredits,omitempty" xml:"http://search.yahoo.com/mrss/ credits>credit,omitempty"`

	// MediaDescription is a short description describing the media object typically a sentence in length.
	MediaDescription *externalRef2.MediaDescription `json:"MediaDescription,omitempty" xml:"http://search.yahoo.com/mrss/ description,omitempty"`

	// MediaEmbed allows inclusion of player-specific information in the form of key-value (Param) pairs.
	MediaEmbed *externalRef2.MediaEmbed `json:"MediaEmbed,omitempty" xml:"http://search.yahoo.com/mrss/ embed,omitempty"`

	// MediaGroup allows grouping of <media:content> elements that are effectively the same content, yet different representations. For instance: the same song recorded in both the WAV and MP3 format.
	MediaGroup *externalRef2.MediaGroup `json:"MediaGroup,omitempty"`

	// MediaHashes a list of hashes for the object.
	MediaHashes externalRef2.MediaHashes `json:"MediaHashes,omitempty" xml:"http://search.yahoo.com/mrss/ hash,omitempty"`

	// MediaKeywords are highly relevant keywords describing the media object with typically a maximum of 10 words. The keywords and phrases should be comma-delimited.
	MediaKeywords *externalRef2.MediaKeywords `json:"MediaKeywords,omitempty" xml:"http://search.yahoo.com/mrss/ keywords,omitempty"`

	// MediaLicense link to specify the machine-readable license associated with the content.
	MediaLicense *externalRef2.MediaLicense `json:"MediaLicense,omitempty" xml:"http://search.yahoo.com/mrss/ license,omitempty"`

	// MediaPeerLink contains P2P link.
	MediaPeerLink *externalRef2.MediaPeerLink `json:"MediaPeerLink,omitempty" xml:"http://search.yahoo.com/mrss/ peerLink,omitempty"`

	// MediaPlayer allows the media object to be accessed through a web browser media player console.
	MediaPlayer *externalRef2.MediaPlayer `json:"MediaPlayer,omitempty" xml:"http://search.yahoo.com/mrss/ player,omitempty"`

	// MediaPrice includes pricing information about a media object. If this tag is not present, the media object is supposed to be free.
	MediaPrice *externalRef2.MediaPrice `json:"MediaPrice,omitempty" xml:"http://search.yahoo.com/mrss/ price,omitempty"`

	// MediaRating allows the permissible audience to be declared. If this element is not included, it assumes that no restrictions are necessary.
	MediaRating *externalRef2.MediaRating `json:"MediaRating,omitempty" xml:"http://search.yahoo.com/mrss/ rating,omitempty"`

	// MediaResponses allows inclusion of a list of all media responses a media object has received.
	MediaResponses externalRef2.MediaResponses `json:"MediaResponses,omitempty" xml:"http://search.yahoo.com/mrss/ responses>response,omitempty"`

	// MediaRestriction allows restrictions to be placed on the aggregator rendering the media in the feed.
	MediaRestriction *externalRef2.MediaRestriction `json:"MediaRestriction,omitempty" xml:"http://search.yahoo.com/mrss/ restriction,omitempty"`

	// MediaRights specifies the rights information of a media object.
	MediaRights *externalRef2.MediaRights `json:"MediaRights,omitempty" xml:"http://search.yahoo.com/mrss/ rights,omitempty"`

	// MediaScenes specifies various scenes within a media object.
	MediaScenes externalRef2.MediaScenes `json:"MediaScenes,omitempty" xml:"http://search.yahoo.com/mrss/ scenes>scene,omitempty"`

	// MediaStatus specifies the status of a media object -- whether it's still active or it has been blocked/deleted.
	MediaStatus *externalRef2.MediaStatus `json:"MediaStatus,omitempty" xml:"http://search.yahoo.com/mrss/ status,omitempty"`

	// MediaSubTitle contains subtitle/CC link.
	MediaSubTitle *externalRef2.MediaSubTitle `json:"subTitle,omitempty" xml:"http://search.yahoo.com/mrss/ subTitle,omitempty"`

	// MediaTexts a list of texts for the object.
	MediaTexts externalRef2.MediaTexts `json:"MediaTexts,omitempty" xml:"http://search.yahoo.com/mrss/ texts>text,omitempty"`

	// MediaThumbnails a list of thumbnails for the object.
	MediaThumbnails externalRef2.MediaThumbnails `json:"MediaThumbnails,omitempty" xml:"http://search.yahoo.com/mrss/ thumbnail,omitempty"`

	// MediaTitle is the title of the particular media object.
	MediaTitle *externalRef2.MediaTitle `json:"MediaTitle,omitempty" xml:"http://search.yahoo.com/mrss/ title,omitempty"`

	// PermaLink is defined as a URL for a resource that is always available (similar to a PURL). Some weblogs cycle through articles and a URL may become invalid after a period of time. Permalinks provide a link that is always available to and should be provided within RSS so that clients can use this instead of a temporary link.
	PermaLink *PermaLink `json:"link_permalink,omitempty" xml:"http://purl.org/rss/1.0/modules/link/ permalink,omitempty"`

	// Author is the email address of the author of the item. For newspapers and magazines syndicating via RSS, the author is the person who wrote the article that the <item> describes. For collaborative weblogs, the author of the item might be different from the managing editor or webmaster. For a weblog authored by a single individual it would make sense to omit the <author> element.
	Author *Author `json:"author,omitempty" xml:"author,omitempty"`

	// Categories is a list of categories associated with the channel.
	Categories []Category `json:"categories,omitempty" xml:"category,omitempty"`

	// Comments is the url of the comments page for the item.
	Comments *Comments `json:"comments,omitempty" xml:"comments,omitempty"`

	// Description is the description of the channel or item.
	Description *Description `json:"description,omitempty" xml:"description,omitempty"`

	// Enclosure describes a media object.
	Enclosure *Enclosure `json:"enclosure,omitempty" xml:"enclosure,omitempty"`

	// Extensions records any elements that are unknown extensions to the schema.
	Extensions externalRef3.Extensions `json:"extensions,omitempty" xml:",any"`

	// GUID is a string that uniquely identifies an item.
	GUID *GUID `json:"guid,omitempty" xml:"guid,omitempty"`

	// Image contains details of a GIF, JPEG or PNG image that can be displayed with the channel or item.
	Image *Image `json:"image,omitempty" xml:"image,omitempty"`

	// Link identifies a web address associated with the channel or item.
	Link *Link `json:"link,omitempty" validate:"omitempty,uri" xml:"link,omitempty"`

	// PubDate is the publication date of the content.
	PubDate *PubDate `json:"pubDate,omitempty" validate:"omitempty" xml:"pubDate,omitempty"`

	// Source The RSS channel that the item came from.
	Source *Source `json:"source,omitempty" xml:"source,omitempty"`

	// Title is the name of the channel or item.
	Title *Title `json:"title,omitempty" xml:"title,omitempty"`
}

// ItemElements contains all Item elements.
type ItemElements struct {
	// Author is the email address of the author of the item. For newspapers and magazines syndicating via RSS, the author is the person who wrote the article that the <item> describes. For collaborative weblogs, the author of the item might be different from the managing editor or webmaster. For a weblog authored by a single individual it would make sense to omit the <author> element.
	Author *Author `json:"author,omitempty" xml:"author,omitempty"`

	// Categories is a list of categories associated with the channel.
	Categories []Category `json:"categories,omitempty" xml:"category,omitempty"`

	// Comments is the url of the comments page for the item.
	Comments *Comments `json:"comments,omitempty" xml:"comments,omitempty"`

	// Description is the description of the channel or item.
	Description *Description `json:"description,omitempty" xml:"description,omitempty"`

	// Enclosure describes a media object.
	Enclosure *Enclosure `json:"enclosure,omitempty" xml:"enclosure,omitempty"`

	// GUID is a string that uniquely identifies an item.
	GUID *GUID `json:"guid,omitempty" xml:"guid,omitempty"`

	// Image contains details of a GIF, JPEG or PNG image that can be displayed with the channel or item.
	Image *Image `json:"image,omitempty" xml:"image,omitempty"`

	// Link identifies a web address associated with the channel or item.
	Link *Link `json:"link,omitempty" validate:"omitempty,uri" xml:"link,omitempty"`

	// PubDate is the publication date of the content.
	PubDate *PubDate `json:"pubDate,omitempty" validate:"omitempty" xml:"pubDate,omitempty"`

	// Source The RSS channel that the item came from.
	Source *Source `json:"source,omitempty" xml:"source,omitempty"`

	// Title is the name of the channel or item.
	Title *Title `json:"title,omitempty" xml:"title,omitempty"`
}

// Language The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page.
type Language = string

// LastBuildDate is the last time the content of the channel changed.
type LastBuildDate = types.DateTime

// Link identifies a web address associated with the channel or item.
type Link = string

// ManagingEditor is the email address for person responsible for editorial content.
type ManagingEditor = string

// PubDate is the publication date of the content.
type PubDate = types.DateTime

// RSS represents an RSS document.
type RSS struct {
	// XMLName represents the XML namespace of an element.
	XMLName externalRef3.XMLName `json:"xml" validate:"required"`

	// Attributes contains any additional attributes (including namespaces).
	Attributes []xml.Attr `json:"attributes" xml:",any,attr"`

	// Channel is the element containing metadata (Channel elements) and items.
	Channel Channel `json:"channel" validate:"required" xml:"channel"`

	// Version specifies the version of RSS that the document conforms to.
	Version string `json:"version" validate:"required,oneof=0.91 0.92 2.0 2.0.1" xml:"version,attr"`
}

// Rating contains a rating for the element.
type Rating = string

// SkipDays is a hint for aggregators telling them which days they can skip. This
type SkipDays struct {
	Day []SkipDaysDay `json:"day,omitempty" validate:"omitempty,dive,oneof=Monday Tuesday Wednesday Thursday Friday Saturday Sunday" xml:"day,omitempty"`
}

// SkipDaysDay is a day of the week to skip.
type SkipDaysDay string

// SkipHours is a hint for aggregators telling them which hours they can skip.
type SkipHours struct {
	Hour []int `json:"hour,omitempty" validate:"omitempty,dive,gte=0,lte=23" xml:"hour,omitempty"`
}

// Source The RSS channel that the item came from.
type Source struct {
	URL *string `json:"url,omitempty" validate:"uri" xml:"url,attr"`

	// Value is an element value that is required.
	Value externalRef3.RequiredValue `json:"value" validate:"required" xml:",chardata"`
}

// TTL stands for time to live. It's a number of minutes that indicates how long a channel can be cached before refreshing from the source.
type TTL = int

// TextInput The purpose of the <textInput> element is something of a mystery. You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.
type TextInput struct {
	// Description explains the text input area.
	Description string `json:"description" validate:"required" xml:"description"`

	// Link is the URL of the CGI script that processes text input requests.
	Link string `json:"link" validate:"required,uri" xml:"link"`

	// Name is the name of the text object in the text input area.
	Name string `json:"name" validate:"required" xml:"name"`

	// Title is the label of the Submit button in the text input area.
	Title string `json:"title" validate:"required" xml:"title"`
}

// Title is the name of the channel or item.
type Title = string

// WebMaster is the email address for person responsible for technical issues relating to channel.
type WebMaster = string
